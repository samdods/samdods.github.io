<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | ]]></title>
  <link href="http://sam.dods.co/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://sam.dods.co/"/>
  <updated>2016-12-01T22:11:58+00:00</updated>
  <id>http://sam.dods.co/</id>
  <author>
    <name><![CDATA[Sam Dods]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to intercept delegate messages if you are not the delegate]]></title>
    <link href="http://sam.dods.co/blog/2014/08/03/secondary-delegate/"/>
    <updated>2014-08-03T13:45:25+01:00</updated>
    <id>http://sam.dods.co/blog/2014/08/03/secondary-delegate</id>
    <content type="html"><![CDATA[<p>I recently found myself in a situation where I needed to listen out for changes to a UIScrollView of which I couldn’t set the delegate. My situation was with the underlying UIScrollView of a UIWebView instance, but there are other situations where you might want to receive delegate method calls from an object for which you are not allowed to set the delegate.</p>

<p>The problem is that UIWebView exposes its underlying UIScrollView, but it would be bad etiquette to set its delegate, because you are not the owner of the UIScrollView instance and you don’t know the implementation of UIWebView.</p>

<p>So, the question is: how can we listen out for the delegate messages from a UIScrollView, when we are not acting as the delegate?</p>

<!-- More -->


<p>One solution would be to use KVO. But it wouldn&rsquo;t be possible to implement <code>-scrollViewWillEndDragging:withVelocity:targetContentOffset:</code> using KVO.</p>

<h1>Secondary Delegate</h1>

<p>So I propose adding a <code>secondaryDelegate</code> property in a category on UIScrollView. This category will implement the <code>-setSecondaryDelegate:</code> method, which can be called from the app (from a view controller, say).</p>

<pre><code class="objc">@interface UIScrollView (SecondaryDelegate)

@property (nonatomic, weak) id&lt;UIScrollViewDelegate&gt; secondaryDelegate;

@end
</code></pre>

<p>So for example, my view controller can set itself as the “delegate” of its web view’s UIScrollView as follows:</p>

<pre><code>- (void)viewDidLoad
{
  [super viewDidLoad];

  self.webView.scrollView.secondaryDelegate = self;
}
</code></pre>

<p>By setting the <code>secondaryDelegate</code> property, the category’s setter method actually overrides the <code>delegate</code> property with a <code>delegateProxy</code> object. This proxy object holds a weak reference to the original (overridden) delegate and to the secondary delegate provided.</p>

<h1>Delegate Proxy</h1>

<p>The delegate proxy is responsible for forwarding messages to the relevant delegates. The proxy holds a weak reference to each delegate. This means it is perfectly acceptable for the UIScrollView to hold a strong reference to the proxy by way of associated object (explained in more detail later).</p>

<p>The proxy object is a subclass of NSProxy and conforms to the UIScrollViewDelegate protocol, so it must implement the following methods: <code>-methodSignatureForSelector:</code> and <code>-forwardInvocation:</code>.</p>

<p>We’ll also implement the <code>-respondsToSelector:</code> method, because we know our proxy will be used as the delegate of a UIScrollView, which will check if the delegate responds to each selector before calling that selector.</p>

<p>To determine the method signature for a selector, we can just ask each delegate and return when we find one that can provide what we need.</p>

<pre><code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector
{
  NSObject *delegateForResonse = [self.primaryDelegate respondsToSelector:selector] ? self.primaryDelegate : self.secondaryDelegate;
  return [delegateForResonse respondsToSelector:selector] ? [delegateForResonse methodSignatureForSelector:selector] : nil;
}
</code></pre>

<p>To determine if the proxy can respond to a selector, again we just check each delegate and return <code>YES</code> if one of them can respond.</p>

<p>Before calling one of its optional delegate methods the UIScrollView (or anyone else for that matter) asks its delegate if it can respond to the selector. If it replies with <code>YES</code>, then it will send the message. But because we have set the <code>delegate</code> property to our <code>delegateProxy</code> object, this message will arrive as an invocation in the <code>-forwardInvocation:</code> method.</p>

<p>We should implement this method as follows in order to forward the invocation to each delegate in turn (if it can respond to the selector).</p>

<pre><code>- (void)forwardInvocation:(NSInvocation *)invocation
{
  [self invokeInvocation:invocation onDelegate:self.primaryDelegate];
  [self invokeInvocation:invocation onDelegate:self.secondaryDelegate];
}

- (void)invokeInvocation:(NSInvocation *)invocation onDelegate:(id&lt;UIScrollViewDelegate&gt;)delegate
{
  if ([delegate respondsToSelector:invocation.selector]) {
    [invocation invokeWithTarget:delegate];
  }
}
</code></pre>

<h1>The UIScrollView Category</h1>

<p>For completeness, I’ve added the code for the category, with comments below.</p>

<pre><code>// 1. Private interface extension
@interface UIScrollView ()
@property (nonatomic, strong) TABScrollViewDelegateProxy *delegateProxy;
@end

@implementation UIScrollView (SecondaryDelegate)

// 2. Setter
- (void)setSecondaryDelegate:(id&lt;UIScrollViewDelegate&gt;)secondaryDelegate
{
  if (!self.delegateProxy) {
    self.delegateProxy = [TABScrollViewDelegateProxy alloc];
    self.delegateProxy.primaryDelegate = self.delegate;
  }

  self.delegateProxy.secondaryDelegate = secondaryDelegate;
  self.delegate = self.delegateProxy;
}

// 3. Getter
- (id&lt;UIScrollViewDelegate&gt;)secondaryDelegate
{
  return self.delegateProxy.secondaryDelegate;
}

// 4. Associated object
- (void)setDelegateProxy:(TABScrollViewDelegateProxy *)delegateProxy
{
  objc_setAssociatedObject(self, @selector(delegateProxy), delegateProxy, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (TABScrollViewDelegateProxy *)delegateProxy
{
  return objc_getAssociatedObject(self, @selector(delegateProxy));
}
</code></pre>

<ol>
<li>The <code>delegateProxy</code> property is added to the private interface extension. The fact that this category uses a proxy is an implementation detail and should therefore not be exposed in the public interface.</li>
<li>The setter method for the <code>secondaryDelegate</code> property will create the <code>delegateProxy</code> object if it doesn’t already exist and assign it to the <code>delegateProxy</code> property. Next we the <code>primaryDelegate</code> to the original delegate held in <code>self.delegate</code>. Then we set the <code>delegateProxy.secondaryDelegate</code> and override the object held in <code>self.delegate</code>. (Notice how we only call <code>alloc</code> on the proxy class - this is because instances of NSProxy do not by default respond to <code>-init</code>.)</li>
<li>We should provide the getter method for the object. It is just a wrapper around getting it from <code>self.delegateProxy</code>.</li>
<li>We hold a strong reference to the <code>delegateProxy</code> object by using an associated object. The strong reference is fine, because it only holds weak references to each delegate. (Notice the use of <code>@selector(delegateProxy)</code> as the key for the associated object. This is fine because the pointer returned is unique.)</li>
</ol>


<h1>Conclusion</h1>

<p>This solution is clean and robust. It doesn’t involve method swizzling - only message forwarding using a proxy object, which is fine. In fact the only reason we have to import <code>&lt;objc/runtime.h&gt;</code> is to use associated objects.</p>

<p>The public interface is clean - it only provides a single extra property for UIScrollView - the <code>secondaryDelegate</code>.</p>

<p>The only downside to this is that the original delegate must have been set (if it ever will be set) before you set the secondary delegate. Or rather, you cannot set the <code>delegate</code> property after setting the <code>secondaryDelegate</code>. This is because setting the <code>secondaryDelegate</code> overwrites the value of the <code>delegate</code> property. I thought about a solution that adds an observer to listen for changes to the <code>delegate</code> property, but removing the observer on deallocation was not trivial, so I settled on the solution described above, which will not allow the delegate to be set after having set the secondary delegate.</p>

<p>If you found this interesting, please <a href="http://twitter.com/dodsios">follow me on twitter</a>, or <a href="http://samdods.github.io/atom.xml">subscribe to my RSS feed</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theming]]></title>
    <link href="http://sam.dods.co/blog/2014/07/26/theming/"/>
    <updated>2014-07-26T08:03:03+01:00</updated>
    <id>http://sam.dods.co/blog/2014/07/26/theming</id>
    <content type="html"><![CDATA[<p>Many of the projects on which I&rsquo;ve worked have had the problem of &ldquo;theming&rdquo;, because it&rsquo;s difficult to keep a project&rsquo;s codebase clean when dealing with multiple themes. When I refer to a &ldquo;theme&rdquo; I mean something that only affects the look and feel of an app, but not the functionality.</p>

<p>By &ldquo;theming&rdquo;, I&rsquo;m referring to a project that might have different targets, each with different colour schemes, fonts, sizes, etc. to deliver a different user experience with the same functionality.</p>

<p>But theming can be extended to a single app, with a single theme, where different interface builder (nib/xib) files are backed by a single class. This might be as simple as having a different interface file (or nib) for iPad as opposed to iPhone, where each nib is backed by the same class.</p>

<p>Theming is often even more complex. For example, I might have an app that can display the same content in various forms. A news app, for example, might have a timeline in which it displays article teasers as either: a small widget with headline only; a double-height, more-impactful widget with headline and thumbnail image; a double-height widget with headline and article summary. That&rsquo;s three nibs, and I&rsquo;ll also need each one styled slightly differently whether it&rsquo;s on iPad or iPhone. So that&rsquo;s six nibs all backed by a single class!</p>

<p>In this article, I&rsquo;ll discuss my latest solution to &ldquo;theming&rdquo; using <a href="/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder/">User Defined Runtime Attributes</a>. <!--more--></p>

<h1>Theming with User Defined Runtime Attributes</h1>

<p>Using user defined runtime attributes, you can specify the aesthetic settings of a user interface exactly at the point at which it matters, in Interface Builder. I&rsquo;m a firm believer in the <a href="http://effectivesoftwaredesign.com/2012/02/05/separation-of-concerns/">separation of concerns</a>, and therefore I think the best place to configure an interface is in Interface Builder.</p>

<p>The objective is to be able to do something like so to specify how the app should display my view:</p>

<p><img class="center" src="/images/interface-builder-guidance.png" title="&lsquo;Configuring a themed view in Interface Builder&rsquo; &lsquo;images&rsquo;" ></p>

<p>In the example above, I&rsquo;ve set the value of the &ldquo;themeTextAttributes&rdquo; key to <code>articleWidgetTitle.iPhone.large</code>. I&rsquo;ll use this key-value pair later, but what&rsquo;s important at this stage is that this can be configured differently for each nib.</p>

<p>The ultimate objective is a project that requires no changes in code to change the aesthetics of a view.</p>

<h1>Reading a Theme from a Property List</h1>

<p>One of the traditional theming methods I&rsquo;ve come across is the use of a property list (.plist file) or other resource containing keys and values for fonts, colours, etc. for a particular theme.</p>

<p>I first came across this approach from the <a href="http://twinlogix.com/en/blog/how-create-multiple-themes-ios-apps">Twinlogix blog post</a> written by Alex Reggiani, in which he uses a plist file to reference each of his interface elements. His plist appears to contain one huge list of keys for various UI elements &ndash; of which there may be hundreds in a larger app &ndash; and I think this makes it very difficult to find the element you&rsquo;re looking for when you want to modify something. In the <a href="http://twinlogix.com/en/blog/how-create-multiple-themes-ios-apps-part-ii">second part</a> of Alex&rsquo;s article, he concludes that the best approach is to specify in the nib&rsquo;s user defined runtime attributes the font name and size for a UI element. I personally don&rsquo;t think this approach provides any benefit over using Interface Builder&rsquo;s attribute inspector.</p>

<p>I have also seen a very good implementation of the plist approach by <a href="https://twitter.com/shaps">Shaps </a>, but again this results in a very long list of keys in a dictionary, which I personally find hard to maintain. And the technique I will describe below means that all this configuration can come from inside Interface Builder, rather than in view or view controller code.</p>

<p>Now consider the fictional apps <em>Sam&rsquo;s Mega Lucky Bingo</em> and <em>Jurassic Bingo Legends</em>, which are both built from the same codebase with exactly the same user interface. Their only difference is the colour scheme and fonts used throughout each app. For these apps, I would create a different plist for each app and compile the corresponding plist into the bundle at build time, resulting in a different look and feel. An example plist file might look like so:</p>

<p><img class="center" src="/images/plist-example.png" title="&lsquo;Example Theme Plist&rsquo; &lsquo;images&rsquo;" ></p>

<p>I think this is a realy nicely structured plist, in which I can group components at various levels, so they can be easily located, along with the device type on which it will appear, and the form it will take.</p>

<p>Now I would likely have a helper class from which I can request the font, text colour and line spacing for a particular user interface element. For example, in the <code>-awakeFromNib</code> method of my <code>ArticleWidgetView</code> class, I would setup the view as follows:</p>

<pre><code class="objc ArticleWidgetView.m">- (void)awakeFromNib
{
    NSString *element = @"articleWidgetTitle.iPhone.large";
  self.titleLabel.font = [Theme fontForElement:element];
  self.titleLabel.textColour = [Theme colorForElement:element];
  // line-spacing will be used when setting the attributedText property.
}
</code></pre>

<p>The <code>Theme</code> class helper methods will look up the values for the relevant properties in the plist dictionary. The implementation of the <code>+fontForElement:</code> method might look like so (after having read the plist into a dictionary on app launch):</p>

<pre><code class="objc Theme.m">+ (UIFont *)fontForElement:(NSString *)element
{
    NSDictionary *textAttributes = [[Theme sharedInstance] plistDictionary][@"Text Attributes"];
    NSDictionary *elementDictionary = [textAttributes valueForKeyPath:element];

    NSString *fontName = elementDictionary[@"fontName"];
    CGFloat fontSize = [elementDictionary[@"fontSize"] floatValue];

  NSAssert(fontName, @"Font not found for element %@", element);

    return fontName ? [UIFont fontWithName:fontName size:fontSize] : nil;
}
</code></pre>

<p>Because the <code>element</code> string passed into the method takes the form of a key path (keys separated by dots), I can pass this directly to the dictionary to get the object at the end of the path. So in my <code>-awakeFromNib</code> method, I pass in the string <code>@"articleWidgetTitle.iPhone.large"</code>, which I use as the string in <code>-valueForKeyPath:</code> method above. This is effectively the same as doing <code>textAttributes[@"articleWidgetTitle"][@"iPhone"][@"large"]</code>.</p>

<p>The downside to what we&rsquo;ve seen so far is that in your class implementation you need to know the &ldquo;element name&rdquo; that you will pass to the <code>Theme</code> class helper methods.</p>

<h1>Separating Concerns</h1>

<p>Now the objective is to strip out any interface-configuration logic from the view class. I don&rsquo;t really want the <code>ArticleWidgetView</code> class to care about the theme at all. It is loaded from a nib, so why should there be any further configuration required in the implementation?</p>

<p>That&rsquo;s when we get back to user defined runtime attributes. As shown before, I&rsquo;ve configured my view in Interface Builder with the following runtime attributes:</p>

<p><img class="center" src="/images/runtime-attributes.png" title="&lsquo;Runtime Attributes in Interface Builder&rsquo; &lsquo;images&rsquo;" ></p>

<p>Now as soon as I run this project, it&rsquo;s going to crash:</p>

<pre><code class="sh">*** Terminating app due to uncaught exception 'NSUnknownKeyException',
reason: '[&lt;UILabel 0x993b840&gt; setValue:forUndefinedKey:]:
this class is not key value coding-compliant for the key themeTextAttributes.'
</code></pre>

<p>We can easily fix this by implementing the necessary method in a category on UILabel, as follows:</p>

<pre><code class="objc UILabel+Theme.m">- (void)setThemeTextAttributes:(NSString *)element
{
  self.font = [Theme fontForElement:element];
  self.textColor = [Theme colorForElement:element];
  CGFloat lineSpacing = [Theme lineSpacingForElement:element];
  objc_setAssociatedObject(self, @selector(themeLineSpacing), @(lineSpacing), OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (CGFloat)themeLineSpacing
{
    return [objc_getAssociatedObject(self, _cmd) floatValue];
}
</code></pre>

<p>By simply having this category exist in the project, all instances of <code>UILabel</code> will be able to respond the <code>setThemeTextAttributes:</code> method, which means I can use the key <code>themeTextAttributes</code> in Interface Builder&rsquo;s user defined runtime attributes.</p>

<p>In the code snippet above, I&rsquo;m also setting an associated object on the UILabel instance, which will hold the line spacing as specified in the theming plist. I can use this property when setting attributed text on the label in the view&rsquo;s implementation. I will define the category header as follows:</p>

<pre><code class="objc UILabel+Theme.h">@interface UILabel (Theme)
@property (nonatomic, readonly) CGFloat themeLineSpacing;
@end
</code></pre>

<p>Note that I do not need to publicly expose the <code>setThemeTextAttributes:</code> method in the interface.</p>

<p>Now I can configure all my labels in Interface Builder with no need to clutter the view or view controller code with unnecessary aesthetics code. I can add further categories for <code>UITextView</code>, <code>UIView</code> and other UIKit classes so that I can set the keys for their aesthetic properties in Interface Builder - where interface configuration belongs!</p>

<h1>Demo Project</h1>

<p>A demo project is <a href="https://github.com/samdods/DZLThemer">available on GitHub</a>.</p>

<p>I&rsquo;m really keen to hear how other people have tackled theming, so <a href="http://twitter.com/dodsios">talk to me on twitter</a>! Or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collection Operators Done Properly]]></title>
    <link href="http://sam.dods.co/blog/2014/07/25/collection-operators-done-properly/"/>
    <updated>2014-07-25T21:33:59+01:00</updated>
    <id>http://sam.dods.co/blog/2014/07/25/collection-operators-done-properly</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>Foundation&rsquo;s <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/CollectionOperators.html">KVC Collection Operators</a> are often overlooked and underused, but for those in the know they are a powerful tool to have in your Cocoa shed.
The obvious advantage is their consicion, but the big disadvantage is that we don&rsquo;t get compile-time errors when we misuse them and nor do we get code-completion. And herein lies the problem.
In this article I&rsquo;ll discuss KVC Collection Operators in more detail and propose a solution to this problem.</p>

<!-- more -->


<h1>The Desirables</h1>

<p>Firstly, we should be explicit about what types of objects we expect to be in the collection. This should give us code-completion on the key path and an error if the key path doesn&rsquo;t exist on objects of the pre-specified type.</p>

<p>Secondly, some collection operators demand that the key path leads to a specific type of object. For example, <code>@maximum</code> and <code>@minimum</code> require the objects to implement the <code>-compare:</code> method. In these cases, we should get a compile-time error if the key path leads to an object of an invalid type.</p>

<p>Finally, we should only be allowed to use the documented collection operators, and we should get compile-time errors if we try to use an undefined operator.</p>

<h1>Some Background</h1>

<p>Collection operators have been talked about a lot, but still I see them rarely used. Do people just forget about them? <a href="http://nshipster.com/kvc-collection-operators/">NSHipster</a> has given an overview of them and Nicolas Bouilleaud has gone into tremendous detail and even <a href="http://bou.io/KVCCustomOperators.html">implemented his own</a>, albeit using an undocumented &lsquo;feature&rsquo; of Cocoa.</p>

<p>I&rsquo;m not going to repeat what everyone else has written about, and I&rsquo;m not going to compete with NSHipster :)</p>

<p>As always <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/CollectionOperators.html">the documentation</a> is a great place to read up on the topic.</p>

<h1>Proposing A Solution</h1>

<h2><strong>Attempt #1</strong></h2>

<p>I had a few different ideas about how I would like to make this more explicit and achieve what I set out in The Desirables.</p>

<p>The first approach was using a proxy object and a category on <code>NSArray</code> like so:</p>

<pre><code class="objc">NSArray *transactions = ...;

// traditional way
NSNumber *total = [transactions valueForKeyPath:@"@sum.amount"];

// my new way:
DZLCollectionProxy *sumProxy = transactions.sum;
NSNumber *total = sumProxy[@"amount"];

// or more simply:
NSNumber *total = transactions.sum[@"amount"];

// and we could get all the payees' distinct accounts like so:
NSArray *payees = transactions.distinctUnionOfObjects[@"payee.account"];
</code></pre>

<p>This requires <code>-sum</code>, <code>-unionOfObjects</code> and all other collection operators to be defined in the category on <code>NSArray</code>, <code>NSSet</code>, etc.</p>

<p>These methods return a proxy object which internally knows which collection operator to perform. The proxy class implements <code>-objectForKeyedSubscript:</code>, which allows us to pass the key path in square brackets. See NSHipster&rsquo;s explanation of <a href="http://nshipster.com/object-subscripting/">Custom Object Subscripting</a>.</p>

<p>The nice thing about this is that it is explicit in its use of the collection operator and for that we will get a compile-time error. But the key path can still be undefined.</p>

<h2><strong>Attempt #2</strong></h2>

<p>I want the key path to be written outside of a string so that we can get code-completion and compile-time errors if the key path is undefined on the objects of a pre-specified type.</p>

<p>Assuming I create my proxy object with the <code>-each</code> method, what about if we cast the proxy object to the type of object inside the collection? Then we can specify at the end of the key path which operator to use. Something like so:</p>

<pre><code>NSArray *payees = [(id)((Transaction *)transactions.each).payee unionOfObjects];
</code></pre>

<blockquote><p>I convert to <code>id</code> here so that the compiler will allow me to send <code>-unionOfObjects</code> to a <code>Payee *</code>, but I could also declare this method in a category on <code>NSObject</code>.</p></blockquote>

<p>This approach would return a new proxy object for each key in the path, storing the original collection object and keeping a track of the key path. It achieves this by implementing <code>-resolveInstanceMethod:</code>, and methods for all collection operators: <code>-unionOfObjects</code>, etc.</p>

<p>I like this solution, because it provides code-completion and compile-time errors. But it has a major disadvantage&hellip;</p>

<p>Collection operators treat methods (including property getters) that return <code>NSNumber *</code> and <code>double</code> as if they were the same. For example, if the <code>Transaction *</code> class had the following properties:</p>

<pre><code>@property (nonatomic, assign) CGFloat amount;
@property (nonatomic, strong) NSNumber *value;
</code></pre>

<p>I could use collection operators on a group of transactions like so:</p>

<pre><code>NSNumber *totalAmount = [transactions valueForKeyPath:@"@sum.amount"];
NSNumber *totalValue = [transactions valueForKeyPath:@"@sum.value"];
</code></pre>

<p>Now if I want to use my new solution on the <code>value</code> object I can do so like this:</p>

<pre><code>NSNumber *totalValue = ((Transaction *)transactions.each).value.sum;
</code></pre>

<p>Looks great right? Simple, explicit, consice. Does what it says on the tin.</p>

<p>But this won&rsquo;t work with the <code>amount</code> property. Even though at runtime it would be fine (because the <code>value</code> method would be implemented dynamically by my proxy object and return another proxy object), the compiler is never going to let me send the <code>-sum</code> message to something of type <code>CGFloat</code>.</p>

<p>I can get around this by having another class that does the operations and takes proxy objects as parameters to its methods. For example:</p>

<pre><code>NSNumber *totalValue = [DZLCollectionOperator sumNumber:((Transaction *)transactions.each).value];
NSNumber *totalAmount = [DZLCollectionOperator sumDouble:((Transaction *)transactions.each).amount];
</code></pre>

<p>At runtime, the pointer for the proxy object returned by the <code>-amount</code> method will be passed to the <code>-sumFloat:</code> method as a <code>double</code>. But it can be used by converting it as so, although admittedly it&rsquo;s massively hacky!</p>

<pre><code>id proxyObj = (__bridge id)(void *)(long long)aDouble;
</code></pre>

<p>This solution now also has the advantage of checking at compile-time that the properties are of the correct type for these methods.</p>

<p>But it&rsquo;s a really hacky approach and we still don&rsquo;t get validation on objects that must implement the <code>-compare:</code> method.</p>

<h2><strong>Attempt #3 (Final)</strong></h2>

<p>Macros. It&rsquo;s simple, all we need to do is define some macros that do all the validation and are written in such a way that Xcode will give us code-completion on the key path.</p>

<p>We can use the fact that Xcode is constantly compiling your code as you write it to check for errors. This means that as we use a macro, its already going through the preprocessor as we write it.</p>

<p>My finally proposed solution looks like this:</p>

<pre><code>NSNumber *average = DZLAverage(transactions, Transaction *, amount);
NSDate *latestDate = DZLMaximum(transactions, Transaction *, date);
NSArray *accounts = DZLUnionOfObjects(transactions, Transaction *, payee.account);
</code></pre>

<p>Checks are automatically carried out on <code>DZLMinimum</code> and <code>DZLMaximum</code>. But I provide extra macros for extra checks for the operators that can process numeric values:</p>

<pre><code>DZLSumDouble(self.transactions, Transaction *, amount);
DZLSumNumber(self.transactions, Transaction *, value);

DZLAverageDouble(self.transactions, Transaction *, amount);
DZLAverageNumber(self.transactions, Transaction *, value);
</code></pre>

<p>Because of the way the macros are written, we get code-completion, nice syntax highlighting in Xcode, warnings and errors as we write the code, and it is simple, explicit and consice.</p>

<h1>Adopt these macros in your project</h1>

<p>These macros are <a href="https://github.com/samdods/DZLCollectionOperators">avilable on GitHub here</a>, they come as a single header file, so they&rsquo;re super easy to install in your own project.</p>

<p>You can also install it as <a href="http://cocoapods.org/?q=dzlcollectionoperators">a cocoapod</a>!</p>

<p>As always, I love discussing things like this in more depth, so <a href="http://twitter.com/dodsios">tweet me</a>, <a href="http://twitter.com/dodsios">follow me</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing the Limits of User-Defined Runtime Attributes in Interface Builder]]></title>
    <link href="http://sam.dods.co/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder/"/>
    <updated>2014-04-08T19:16:47+01:00</updated>
    <id>http://sam.dods.co/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder</id>
    <content type="html"><![CDATA[<p>User-defined runtimes attributes in Xcode&rsquo;s Interface Builder are a great way to keep view controller and view code clean, while obeying Separation of Concerns.
They allow you to configure properties on the view or view controller that you are unable to configure from within Interface Builder&rsquo;s <em>Attributes Inspector</em> or <em>Size Inspector</em>.</p>

<p>But sometimes you may want to setup from Interface Builder a scenario which you can&rsquo;t do from simple KVC-compliant property manipulation.</p>

<p>One example I ran into recently was trying to set the content insets on a collection view in a normal view controller in an iPhone-specific storyboard. In Xcode 5.1 you are unable to set the content insets of a collection view (I&rsquo;m not sure in which Xcode version this was first missing - I&rsquo;m sure you used to be able to do it).
So with this feature missinh, it would be nice to be able to do the same thing using user-defined runtime attributes.</p>

<p>Because contentInset is of <code>UIEdgeInsets</code> type, this isn&rsquo;t possible with any of the types defined in Interface Builder under user-defined runtime attributes. But it can be done!</p>

<p>Another example I will show below is how to set the borderColor property of a <code>CALayer</code>, even though the runtime attributes don&rsquo;t support <code>CGColorRef</code> type. All will be explained!</p>

<!-- More -->


<h1>Runtime Attributes Explained</h1>

<p>First a bit of background: user-defined runtime attributes can be set from the <em>Identity Inspector</em> tab in Interface Builder utilities, as shown below:</p>

<p><img class="center" src="/images/user-defined-runtime-attributes.png" title="&lsquo;User-defined runtime attributes in Xcode&rsquo;s Interface Builder&rsquo; &lsquo;images&rsquo;" ></p>

<p>They are defined as a set of key-value pairs. The key is actually a <em>key path</em>, which is a powerful, especially in Interface Builder where you don&rsquo;t have direct access to the underlying <code>CALayer</code> of a <code>UIView</code> (more on this below).</p>

<p>The limitation is that the object&rsquo;s class must be KVC-compliant for the key (or key path) defined in the set of runtime attributes. To be <em>KVC-compliant</em> for a key <code>foo</code> simply means instances of the class must respond to the selector <code>setFoo:</code>.</p>

<blockquote><p>Really, being KVC-compliant for a property means the class should implement the methods required for <code>valueForKey:</code> and <code>setValue:forKey:</code> to work for that property. For user-defined runtime attributes, that means implementing the setter for the property (key).</p></blockquote>

<p>The following property types available for runtime attributes in Interface Builder:</p>

<ul>
<li><strong>Boolean</strong> - translates to a <code>BOOL</code> property</li>
<li><strong>Number</strong> - can translate to any numeric scalar property or a property of type <code>NSNumber *</code></li>
<li><strong>String</strong> - translates to a property of type <code>NSString *</code></li>
<li><strong>Localized String</strong> - the value here is a key to look up in the <code>strings</code> file for the current locale.</li>
<li><strong>Point</strong> - translates to a <code>CGPoint</code> property</li>
<li><strong>Size</strong> - translates to a <code>CGSize</code> property</li>
<li><strong>Rect</strong> - translates to a <code>CGRect</code> property</li>
<li><strong>Range</strong> - translates to an <code>NSRange</code> property</li>
<li><strong>Color</strong> - translates to a property of type <code>UIColor *</code></li>
<li><strong>Nil</strong> - this spectial type doesn&rsquo;t allow you to set a value, it is just a way of specifying that the value should be set to <code>nil</code></li>
</ul>


<blockquote><p>The types <strong>Point</strong> and <strong>Size</strong> can be used interchangeably, because they both map to the same type of C structure (<code>struct {CGFloat v1; CGFloat v2;}</code>).</p></blockquote>

<h1>Some Examples</h1>

<h3>Configuring a CALayer</h3>

<p>A great example of using runtime attributes is to configure a <code>UIView</code>&rsquo;s underlying <code>CALayer</code>. For example, we can set the layer&rsquo;s border width and corner radius as follows:</p>

<p><img class="center" src="/images/calayer-setup.png" title="&lsquo;Configuring a view&rsquo;s underlying layer&rsquo; &lsquo;images&rsquo;" ></p>

<p>Unfortunately, Interface Builder doesn&rsquo;t allow us to set the color of a CALayer, because the <strong>Color</strong> type doesn&rsquo;t translate to properties of <code>CGColorRef *</code> type (workaround discussed below).</p>

<h3>Configuring Custom Controls</h3>

<p>Another example is if you are using a custom <code>UIControl</code> object such as a range slider. A range slider is similar to the built-in slider, but has two thumbs, or knobs: one to specify the minimum value and one to specify the maximum value.
This kind of control would be useful for setting a minimum price and maximum price in a search query. There are <a href="https://github.com/muZZkat/NMRangeSlider">various</a> <a href="http://www.sitepoint.com/wicked-ios-range-slider-part-one/">implementations</a> <a href="https://github.com/barrettj/BJRangeSliderWithProgress">available</a> in the community.</p>

<p>Using user-defined runtime attributes, you can configure such a control right from within Interface Builder. Taking the example of <a href="https://github.com/muZZkat/NMRangeSlider">NMRangeSlider</a>, you could configure the minimum and maximum values for the slider as follows:</p>

<p><img class="center" src="/images/custom-control-setup.png" title="&lsquo;Configuring a custom control&rsquo; &lsquo;images&rsquo;" ></p>

<p>The main benefit of Interface Builder in my opinion is that it keeps all the UI configuration logic in one place outside of the view controller. By configuring your controls in Interface Builder, this is yet more code that can be removed from your view controller. After all, you would configure your <code>UIButton</code> and <code>UISlider</code> controls in Interface Builder, so why not configure your custom controls too?</p>

<h1>The Limitations</h1>

<p>As discussed above, the class must be KVC-compliant for each key you specify in the runtime attributes. If you specify a key path, then the object returned for each key must be KVC-compliant for the following key in the path.</p>

<p>For example, the list of types shown above means that we can&rsquo;t set the content inset on a <code>UICollectionView</code> because there is no <code>UIEdgeInset</code> type (and no type that uses the exact same C structure type).</p>

<p>We also already discussed the fact that we can&rsquo;t set the border color of a <code>CALayer</code>. Wouldn&rsquo;t it be nice if anything you can think of, you could configure in Interface Builder without adding logic to your view or view controller?</p>

<h1>The Workaround</h1>

<p>Define a category on the object you wish to configure. Comply to KVC in the category and put the configuration logic in the setter method. You don&rsquo;t even need to <code>#import</code> the category header anywhere - just by having it in the project, the runtime will call the setter method.</p>

<h3>Define a Category</h3>

<p>For example, by defining a category on <code>UICollectionView</code>, we can make the class KVC-compliant for any key we choose. To set the content inset, we can define the following category implementation:</p>

<pre><code class="objc">@implementation UICollectionView (ContentInset)

- (void)setContentInsetFromString:(NSString *)string
{
  self.contentInset = UIEdgeInsetsFromString(string);
}

@end
</code></pre>

<p>There&rsquo;s no need to define anything in the category header.</p>

<p>This particular example is especailly simple because of the <code>UIEdgeInsetsFromString</code> mathod, which could it seems have been created specifically for this purpose!</p>

<h3>Configure the Interface</h3>

<p>Now we can set the user-defined runtime attributes in Interface Builder like so:</p>

<p><img class="center" src="/images/content-inset-from-string.png" title="&lsquo;Configuring content inset&rsquo; &lsquo;images&rsquo;" ></p>

<p>The <strong>Key Path</strong> must match the name of the setter method in the category, but without the <strong>set</strong> prefix and with lowercase first letter.</p>

<p>Now you&rsquo;ve configured your interface in Interface Builder - the correct place - and you can avoid having clutter in your code!</p>

<p>An added bonus of doing things in Interface Builder is that if you use separate nibs or storyboards for iPad/iPhone then you can configure your view differently for each device without cluttering your code checking the user interface idiom.</p>

<h1>Another Example</h1>

<p>Now we can define the border color of a <code>CALayer</code> by simply mapping it from a <code>UIColor</code>.</p>

<h3>Define a Category</h3>

<pre><code>@implementation CALayer (Additions)

- (void)setBorderColorFromUIColor:(UIColor *)color
{
  self.borderColor = color.CGColor;
}

@end
</code></pre>

<h3>Configure the Interface</h3>

<p><img class="center" src="/images/calayer-border-color.png" title="&lsquo;Configuring a layer&rsquo;s border color&rsquo; &lsquo;images&rsquo;" ></p>

<h1>Considerations</h1>

<p>I think this is the right way to configure a user interface. Given that we have Interface Builder, we should use it to its full potential. But&hellip; there&rsquo;s always a &ldquo;but&rdquo; isn&rsquo;t there?</p>

<p>Many people wouldn&rsquo;t think to look in Interface Builder at the user-defined runtime attributes, so they could be left very puzzled if they come to maintain your code at a later date. They could be left with a seemingly random border to their view, unable to figure out why it&rsquo;s there.</p>

<p>So like anything of this nature &ndash; and by that I mean a more-advanced use of a programming language or development evironment &ndash; we should use it with caution. Use it only if it is necessary and simplifies logic elsewhere in your code.</p>

<p>Setting up a view in a view controller isn&rsquo;t necessarily messy. The most valid reason for using user-defined runtime attributes is to configure a view differently whether the Interface Builder file is for iPhone or iPad. Because you already have a separate nib or storyboard file specifically for each device, that should be the place that you do any device-specific configuration.</p>

<p>I hope you enjoyed reading this article. If so, please <a href="https://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modal View In Front of the Status Bar]]></title>
    <link href="http://sam.dods.co/blog/2014/02/10/modal-view-in-front-of-the-status-bar/"/>
    <updated>2014-02-10T07:55:28+00:00</updated>
    <id>http://sam.dods.co/blog/2014/02/10/modal-view-in-front-of-the-status-bar</id>
    <content type="html"><![CDATA[<p>This post is based on a really cool effect I saw in the Facebook Paper app released last week. In this app, the user can drag a photo up to the top of the screen to view it full-screen. In doing this, the photo actually appears to be in front of the status bar.</p>

<!-- more -->


<p><strong>Edit</strong> Thanks to <a href="https://twitter.com/EricHoracek">@EricHoracek</a> for pointing out that this can be done without the use of private API methods. I had originally been adding the top (in-front) view controller&rsquo;s view to the <code>UIStatusBarWindow</code> which contains the status bar. But the solution below is much cleaner and uses only public API methods, so is guaranteed for App Store approval.</p>

<p>It&rsquo;s nice to discuss things like this with the never-ending endeavour of finding cleaner approaches and learning something along the way!</p>

<h1>The Effect</h1>

<p><img src="https://github.com/samdods/StatusBarDemo/blob/master/statusBarDemo.gif?raw=true" title="made at imgflip.com"/></p>

<p>What I really like about this is that you can display content full-screen, with no status bar, but allow the user to simply drag down slightly to see the time and other activity shown in the status bar. As we all know with the arrival of iOS 7, content is king! And I think it looks great to show images and other full-screen content without the status bar. But it&rsquo;s nice to know that it&rsquo;s only a slight drag away.</p>

<h1>The Secret</h1>

<p>It&rsquo;s actually very easy. <code>UIWindow</code> has the <code>windowLevel</code> property, which is of type <code>UIWindowLevel</code> (i.e. <code>CGFloat</code>). There are a few predefined window levels that we can take advantage of for this trick. The predefined values are as follows:</p>

<pre><code class="objc">UIKIT_EXTERN const UIWindowLevel UIWindowLevelNormal;
UIKIT_EXTERN const UIWindowLevel UIWindowLevelAlert;
UIKIT_EXTERN const UIWindowLevel UIWindowLevelStatusBar;
</code></pre>

<p>When displaying a new window, it appears in front of all other existing windows at the same level. The higher the <code>windowLevel</code> value, the closer to the front of the screen the window appears.</p>

<p>Below is how to create a new window and add it above the status bar.</p>

<pre><code class="objc">// 1.
self.topWindow = [[UIWindow alloc] initWithFrame:self.view.bounds];

// 2.
[self.topWindow setRootViewController:self.overlayViewController];

// 3.
self.topWindow.windowLevel = UIWindowLevelStatusBar;

// 4.
[self.topWindow makeKeyAndVisible];
</code></pre>

<ol>
<li>Create a new window. Although <code>UIWindow</code> is a subclass of <code>UIView</code>, instances of this class don&rsquo;t generally have a superview. You don&rsquo;t need to add the window to anything else in order for it to be displayed.</li>
<li>Specify the root view controller for the window. This is the view controller who&rsquo;s view you want to appear in front of the status bar.</li>
<li>Specify the window level. By specifying <code>UIWindowLevelStatusBar</code>, the new window will appear above the status bar. Other windows with a higher <code>windowLevel</code>, for example <code>UIWindowLevelAlert</code> will appear in front of your new window still.</li>
<li>Show the window. By invoking <code>makeKeyAndVisible</code>, the window is added to the application. You could also write <code>self.topWindow.hidden = NO;</code>.</li>
</ol>


<h1>The Demo</h1>

<p>I created a demo project <a href="https://github.com/samdods/StatusBarDemo">available on GitHub</a>.</p>

<p>I&rsquo;d be happy to talk about this, so feel free to <a href="http://twitter.com/dodsios">tweet me</a>. I&rsquo;d love to hear if anyone else has tried this and maybe taken a different approach. Subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
</feed>
