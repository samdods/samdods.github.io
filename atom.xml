<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://samdods.github.io/atom.xml" rel="self"/>
  <link href="http://samdods.github.io/"/>
  <updated>2016-07-08T07:12:45+01:00</updated>
  <id>http://samdods.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift Best Practices (Part I)]]></title>
    <link href="http://samdods.github.io/blog/2015/09/21/some-swift-best-practices/"/>
    <updated>2015-09-21T08:00:37+01:00</updated>
    <id>http://samdods.github.io/blog/2015/09/21/some-swift-best-practices</id>
    <content type="html"><![CDATA[<p>I started learning Swift the day it was announced and read Apple&rsquo;s <em>The Swift Programming Language</em> in the first couple of days. I began writing small components and playing around with Swift at the same time, but never felt it was mature enough to begin a big project with it.</p>

<p>That was until Swift 2.0 was announced in June. Since then I&rsquo;ve been using it more and more and recently started writing a major project at <a href="www.theappbusiness.com">The App Business</a> purely in Swift 2.0.</p>

<p>Read on for some of my observations &ndash; some are obvious and common, but hopefully some will be new to most people. Let me know if you have any of your own that I could add to the list!</p>

<!-- More -->


<h2>Prefer <code>let</code> over <code>var</code></h2>

<p>Train your brain and your keyboard-bashing fingers to write <code>let</code> by default. There may be times when you know up-front you&rsquo;ll need a mutable variable, but I still recommend using <code>let</code> until you absolutely need to modify its value. This is the most obvious of my best practices, but it&rsquo;s super important, so still worth a mention.</p>

<h2>Prefer <code>private</code> access control</h2>

<p>Again, this one is obvious, but still worth pointing out. It&rsquo;s always better to keep as much of your implementation <code>private</code>, which means it can only be accessed from the same source file.</p>

<h2>Prefer non-optionals</h2>

<p>Optionals are great. This concept does exist in other languages (Scala, Haskell, etc.), but much respect has to go to Chris Lattner for bringing it to Swift.</p>

<p>However, as useful as they can be, I would still try to avoid them where possible. It leads to much cleaner code if you have variables and properties that you know hold a value, or functions that you can guarantee return a non-nil value.</p>

<p>For example, I would prefer a function to throw an exception if it is unable to return a non-nil value. Take the SDK&rsquo;s <code>NSJSONSerialization.JSONObjectWithData</code> function. It guarantees that if it returns anything, it will return a non-nil <code>AnyObject</code>, otherwise it throws an exception.</p>

<h2>Prefer <code>guard let</code> over <code>if let</code></h2>

<p>What can you do in an <code>if let</code> code block? I would <em>almost</em> always opt for a <code>guard let</code> and return early. Early return tends to make the code that follows easier to read because you can guarantee the state of variables at that point. If you can&rsquo;t calculate a required value, then return early.</p>

<h2>Don&rsquo;t be afraid to <code>throw</code></h2>

<p>Instead of returning early, consider throwing an error, which is an alternative exit point from the function. Exception handling in Objective-C (<code>@try @catch</code>) was always possible, but frowned upon. In Swift, throwing errors is a fundamental concept and should be embraced.</p>

<p>I had a parsing function that returned an optional, returning <code>nil</code> if the data couldn&rsquo;t be parsed. This meant that the caller would have to check for <code>nil</code>. I refactored it to be a function that always returns a non-optional and <code>throws</code> an error if it can&rsquo;t do so (see above related to preferring non-optionals).</p>

<h2>Never <code>guard</code> against multiple conditions</h2>

<p>Consider the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">,</span>
</span><span class='line'>          <span class="n">json</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">jsonFromData</span><span class="p">(</span><span class="n">data</span><span class="p">),</span>
</span><span class='line'>          <span class="n">authors</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;authors&quot;</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">throw</span> <span class="n">AuthorParserError</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above avoids the repetition of throwing the <code>AuthorParserError</code> in three places, but in my opinion it would be much better written as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">throw</span> <span class="n">AuthorParserError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">jsonFromData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">throw</span> <span class="n">AuthorParserError</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">guard</span> <span class="k">let</span> <span class="n">authors</span> <span class="o">=</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;authors&quot;</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">throw</span> <span class="n">AuthorParserError</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is better because you can now test each case individually. And you can be sure that you&rsquo;ve covered each case, because Xcode 7&rsquo;s awesome code coverage facility will highlight any of the conditions that are not tested.</p>

<h2>Always inject dependencies, even if only for testing purposes</h2>

<p>The great thing about Swift&rsquo;s optional function arguments is that you can dictate how something should ordinarily be used but at the same time open up your classes for easy testing - in particular mocking of dependencies.</p>

<p>If your class relies on something to handle network requests, for example, then why not pass that into the <code>init</code> function?</p>

<p>This will make testing a doddle, because you can mock the dependency, ensuring that you are only testing the functionality of that individual class. (Of course you <em>can</em> write more integrated tests too.)</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">public</span> <span class="nf">init</span><span class="p">(</span><span class="nl">requestDelegate</span><span class="p">:</span> <span class="n">MyClassRequestDelegate</span> <span class="o">=</span> <span class="n">RequestManager</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">requestDelegate</span> <span class="o">=</span> <span class="n">requestDelegate</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dependency in the above example is actually a protocol, which makes testing very simple, because we just need to mock an object that conforms to the protocol.</p>

<p>(Some people might even demand that the dependency is always injected, instead of defining the defaul. But I feel the main purpose for this type of dependency injection is for easy testing. Unless you&rsquo;re building a library, your app will probably always use the same dependency, so it usually makes sense to have a default.)</p>

<h2>Always <code>typealias</code> completion handlers (where possible)</h2>

<p>Despite <a href="http://www.fuckingclosuresyntax.com">the syntax of closures being somewhat confusing</a>, the syntax for type aliasing a closure is unquestionably simpler than the equivalent <code>typedef</code> in Objective-C. So always define a <code>typealias</code> for your completion handlers (unless they contain generics, in which case you can&rsquo;t).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">typealias</span> <span class="n">SomethingCompletion</span> <span class="o">=</span> <span class="p">(</span><span class="nl">result</span><span class="p">:</span> <span class="n">SomeType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use <code>enum</code> to avoid ambiguity</h2>

<p>Here I&rsquo;m referring to a tuple or a set of completion handler arguments that may give rise to ambiguity.</p>

<p>Consider the following completion handler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">(</span><span class="nl">output</span><span class="p">:</span> <span class="bp">NSData</span><span class="o">?</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// need to check if we have output or error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note that I&rsquo;m still using NSError as part of the completion handler, rather than throwing an exception, because you can&rsquo;t throw an exception asynchronously.</p></blockquote>

<p>The above shows a completion handler which takes two optional values as its arguments. This goes against one of my previous points of &ldquo;avoiding optionals&rdquo; where possible.</p>

<p>What happens in the above if we have neither <code>output</code> nor <code>error</code>. Or what if we have both? Which do we handle?</p>

<p>You should be clear about the arguments to your completion handler, and you can use <code>enum</code> to help. For example, you could define the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="nl">output</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can rewrite the above use of the completion handler as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">Success</span><span class="p">(</span><span class="k">let</span> <span class="n">output</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// use output</span>
</span><span class='line'>  <span class="k">case</span> <span class="p">.</span><span class="n">Failure</span><span class="p">(</span><span class="k">let</span> <span class="n">error</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// handle error</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is absolutely clear now that if it was successful, there will be a non-nil output. And we even know the type of it, assuming the <code>doSomething</code> function specialises the generic <code>Result</code>. And likewise it is clear that if it failed there will be a non-nil error. And it can only succeed or fail, so there is no ambiguity.</p>

<h2>A trick for generic completion handling</h2>

<p>Let&rsquo;s say you have a function declared in a protocol as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">ServiceProvider</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">provideService</span><span class="o">&lt;</span><span class="n">U</span> <span class="k">where</span> <span class="nl">U</span><span class="p">:</span> <span class="n">AnyService</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">completion</span><span class="p">:</span> <span class="p">(</span><span class="nl">output</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When making a class conform to the <code>ServiceProvider</code> protocol (i.e. when implementing this function), as long as we know how to instantiate an object of type <code>U where U: AnyService</code>, then we can return an object of the correct type. (The <code>AnyService</code> protocol must provide a way of returning an instance.)</p>

<p>It is then up to the caller to dictate in the completion closure what type of object should be returned.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">myOtherClass</span><span class="p">.</span><span class="n">provideService</span> <span class="p">{</span> <span class="p">(</span><span class="nl">output</span><span class="p">:</span> <span class="n">RoomService</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// do something with the RoomService</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The implementation of the <code>provideService</code> function doesn&rsquo;t need to know anything about the <code>RoomService</code> class. It simply has to conform to <code>AnyService</code>, which allows it to be instantiated somehow.</p>

<p>What I really like about this, is that the caller can get back whatever they want back. The caller simply says, &ldquo;in the completion handler, I want an instance of <code>RoomService</code>&rdquo; and the implementation of the function knows how to deliver.</p>

<p>This is in stark contrast with Objective-C, where we would define a completion block argument of type <code>id</code> and the caller would tell the compiler what type of object they <em>expect</em> back when they implement the completion handler. But in Swift, we are <em>guaranteed</em> an object of this type. What&rsquo;s more, we are given this guarantee at compile time.</p>

<h2>Closure best practices</h2>

<p>I try to keep closures as concise as possible.</p>

<ul>
<li>If a closure returns <code>Void</code>, I don&rsquo;t write the return type</li>
<li>If the type of the object can be inferred by the compiler, then don&rsquo;t write the type</li>
<li>If the closure only has a single argument, then don&rsquo;t put it in parentheses</li>
<li>Always make the closure the last argument to a function</li>
<li>Always trail the closure when implementing</li>
<li>Don&rsquo;t write redundant parentheses that the compiler doesn&rsquo;t require (for example, if the function only has one argument and that argument is the closure)</li>
</ul>


<p>These are largely up for debate, but this is the way I&rsquo;m writing things right now. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">myObject</span><span class="p">.</span><span class="n">doSomething</span> <span class="p">{</span> <span class="n">output</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// do something with the output</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As opposed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">myObject</span><span class="p">.</span><span class="n">doSomething</span><span class="p">()</span> <span class="p">{</span> <span class="p">(</span><span class="nl">output</span><span class="p">:</span> <span class="bp">NSData</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>  <span class="c1">// do something with the output</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>I hope you enjoyed reading</h2>

<p>If you enjoyed this article, please <a href="http://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same. I’m happy to discuss this or any other subject in more depth, so feel free to contact me!</p>

<p>And if you&rsquo;d like to join me at <a href="http://www.theappbusiness.com">The App Business</a> to work on some awesome projects for the biggest clients in each industry, then please get in touch &ndash; we&rsquo;re looking for great Swift and Objective-C developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Love Swift's Protocol Extensions]]></title>
    <link href="http://samdods.github.io/blog/2015/08/04/why-i-love-swift-protocol-extensions/"/>
    <updated>2015-08-04T08:00:00+01:00</updated>
    <id>http://samdods.github.io/blog/2015/08/04/why-i-love-swift-protocol-extensions</id>
    <content type="html"><![CDATA[<p>When protocol extensions were first mentioned at WWDC in June, they immediately stood out as a necessary feature. But it was only after I started playing around with them that I realised the true value these bring to the language.</p>

<!-- More -->


<h2>The problems in Objective-C that are somewhat solved by Swift</h2>

<h3>The ability to &ldquo;mix in&rdquo; functionality to classes</h3>

<p>When you want to extend a class in Objective-C, you would typically create a category on that class.</p>

<p>Say in my app I have defined the <code>Video</code>, <code>Photo</code> and <code>Song</code> classes, which have the shared superclass <code>MediaItem</code>.</p>

<p>Now I want to give each of these classes some functionality to make them <code>Shareable</code>. And I would expect this functionality to mostly be the same in each class.</p>

<p>Now you might suggest I implement the shareable functionality in their common superclass, and then somehow specify whether each one is shareable. But I might not want all future subclasses to inherit this functionality, and I may want to give this functionality to other classes that don&rsquo;t inherit from <code>MediaItem</code>. For example, I might want to make <code>UserProfile</code> shareable, so my users can share each other&rsquo;s profiles.</p>

<blockquote><p>With inheritance, you would typically follow the &ldquo;is a&rdquo; principle, meaning an object of your subclass type is an object of its superclass type and inherits common properties. For example, in real life, a <code>Dog</code> <em>is a</em> <code>Mammal</code> so it would make sense to inherit from the <code>Mammal</code> class.</p>

<p>A <code>Dog</code> should also be capable of other functionality, for example being able to <code>run</code>. It doesn&rsquo;t make sense to implement that functionality in the <code>Mammal</code> class, because it would not apply to the <code>Whale</code>, which is also a subclass of <code>Mammal</code>.</p>

<p>It doesn&rsquo;t make sense to have a <code>Runner</code> class for <code>Dog</code> to inherit from, because a <code>Dog</code> isn&rsquo;t necessarily a <code>Runner</code>, so the &ldquo;is a&rdquo; principle doesn&rsquo;t apply. Being able to <code>run</code> is a capability rather than a property.</p></blockquote>

<p>So how can I provide the <code>Shareable</code> functionality to my media classes without implementing it in each class individually? Well in Objective-C it simply isn&rsquo;t possible. Of course, you could add the shared functionality to a category on <code>NSObject</code>. But then (almost) all of your classes will inherit this functionality, which you don&rsquo;t want.</p>

<p>This is where Swift&rsquo;s protocol extensions come in handy. You could define the <code>Shareable</code> protocol like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">Shareable</span> <span class="p">{}</span>
</span><span class='line'><span class="k">extension</span> <span class="n">Shareable</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">share</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// common share functionality</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now any class that you declare as conforming to the <code>Shareable</code> protocol will &ldquo;adopt&rdquo; the sharing functionality. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Photo</span><span class="p">:</span> <span class="n">MediaItem</span><span class="p">,</span> <span class="n">Shareable</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// func share() adopted from Shareable protocol</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">UserProfile</span><span class="p">:</span> <span class="n">Shareable</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// func share() adopted from Shareable protocol</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are familiar with Ruby, you will see the resemblence to what is known as a mixin.</p>

<h3>The requirement to check <code>respondsToSelector:</code></h3>

<p>For aeons people have been trying to work around this problem, for example Peter Steinberger&rsquo;s <a href="http://petersteinberger.com/blog/2013/smart-proxy-delegation/">Smart Proxy Delegation</a>. But all such solutions are only work arounds.</p>

<p>We all know that pure Swift protocols don&rsquo;t support optional methods. And Swift objects don&rsquo;t support <code>respondsToSelector</code>. But with protocol extensions, none of this matters!</p>

<p>We can simplify what used to be five rather ugly lines of Objective-C&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">BOOL</span> <span class="n">shouldBegin</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="kt">id</span><span class="o">&lt;</span><span class="n">DataServiceDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">delegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">dataServiceShouldBeginSync</span><span class="p">:)])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">shouldBegin</span> <span class="o">=</span> <span class="p">[</span><span class="n">delegate</span> <span class="nl">dataServiceShouldBeginSync</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; into a single line of Swift&hellip;</p>

<figure class='code'><figcaption><span>Swift</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">shouldBegin</span> <span class="o">=</span> <span class="n">delegate</span><span class="p">.</span><span class="n">dataServiceShouldBeginSync</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is acheived by defining the default implementation of this methods in an extension to the protocol, as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">DataServiceDelegate</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">dataServiceShouldBeginSync</span><span class="p">(</span><span class="nl">dataService</span><span class="p">:</span> <span class="n">DataService</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The additional beauty of this is that it makes the default behaviour explicitly clear to the consumer of your interface. No longer do they have to hunt around in possibly out-of-date documentation to figure out what will happen if they don&rsquo;t implement this methods themselves. And the default behaviour isn&rsquo;t hidden in the implementation.</p>

<h2>The additional powers of protocol extensions</h2>

<p>You can specify a &ldquo;where&rdquo; clause for your extension, so that only specific conforming classes adopt the functionality defined in the extension.</p>

<p>This allows us to define different default behaviour depending on the class that conforms to the protocol. For example, I could define the following protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">Shareable</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">share</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can specify that any object that conforms to this protocol should use the default behaviour as defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">Shareable</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">share</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;sharing something&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And I can specify that all media items have a different default behaviour:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">Shareable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">MediaItem</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">share</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;sharing a media item!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note that this is not the same as providing this implementation in the <code>MediaItem</code> class, because this doesn&rsquo;t mean all <code>MediaItem</code> objects are <code>Shareable</code>. Only subclasses that conform to the <code>Shareable</code> protocol will pick up this functionality.</p></blockquote>

<p>This is demonstrated below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">UserProfile</span> <span class="p">:</span> <span class="n">Shareable</span> <span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nl">AudioTrack</span> <span class="p">:</span> <span class="n">MediaItem</span><span class="p">,</span> <span class="n">Shareable</span> <span class="p">{}</span>
</span><span class='line'><span class="k">class</span> <span class="nl">Video</span> <span class="p">:</span> <span class="n">MediaItem</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">userProfile</span> <span class="o">=</span> <span class="n">UserProfile</span><span class="p">()</span>
</span><span class='line'><span class="n">userProfile</span><span class="p">.</span><span class="n">share</span><span class="p">()</span>
</span><span class='line'><span class="c1">// prints &quot;sharing something&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">audio</span> <span class="o">=</span> <span class="n">AudioTrack</span><span class="p">()</span>
</span><span class='line'><span class="n">audio</span><span class="p">.</span><span class="n">share</span><span class="p">()</span>
</span><span class='line'><span class="c1">// prints &quot;sharing a media item!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">video</span> <span class="o">=</span> <span class="n">Video</span><span class="p">()</span>
</span><span class='line'><span class="n">video</span><span class="p">.</span><span class="n">share</span><span class="p">()</span>
</span><span class='line'><span class="c1">// results in a compiler error: value of type &#39;Video&#39; has no member &#39;share&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also means that you can refer to <code>self</code> in the default implementation and access the properties of <code>self</code> with the knowledge that it is of a particular type. For example, the <code>MediaItem</code>  might have a <code>copyrightTerms</code> property, so I can use it in my default implementation as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">extension</span> <span class="n">Shareable</span> <span class="k">where</span> <span class="nl">Self</span> <span class="p">:</span> <span class="n">MediaItem</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">share</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">copyrightTerms</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// present the copyright terms to the user, asking them to accept before continuing.</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// complete share action without showing copyright terms.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So are there any drawbacks?</h2>

<p>Like with so many language features: with great power comes great responsibility. And even more importantly, comes the greater need to fully understand how something works.</p>

<p>The methods in a protocol extension can also be implemented in the class that conforms to the protocol. The implementation in the class overrides the &ldquo;default&rdquo; implementation in the protocol extension. What&rsquo;s more is that if the implementation is added to the class in the form of a class extension, then it too overrides the protocol extension implementation. This can get very confusing if you are defining different implementations using the &ldquo;where&rdquo; syntax.</p>

<p>As more people become accustomed to writing Swift, I&rsquo;m sure the most common use for protocol extensions will be for the default implementation of &ldquo;optional&rdquo; delegate methods.</p>

<p>But for those that do use them as a kind of &ldquo;mixin&rdquo;, I&rsquo;d suggest erring on the side of caution and making your intent very clear.</p>

<h2>I hope you enjoyed reading</h2>

<p>If you enjoyed this article, please <a href="http://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same. I’m happy to discuss this or any other subject in more depth, so feel free to contact me!</p>

<p>And if you&rsquo;d like to join me at <a href="http://www.theappbusiness.com">The App Business</a> to work on some awesome projects for the biggest clients in each industry, then please get in touch &ndash; we&rsquo;re looking for great Swift and Objective-C developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Stencil]]></title>
    <link href="http://samdods.github.io/blog/2015/05/02/stencil-xcode-plugin/"/>
    <updated>2015-05-02T11:50:25+01:00</updated>
    <id>http://samdods.github.io/blog/2015/05/02/stencil-xcode-plugin</id>
    <content type="html"><![CDATA[<p><a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> is an Xcode plugin that provides the ability to create custom file templates and use them in your project to create new files. It&rsquo;s intended to save you time while making it easy to extend a project in the future: for you, next week; for your current colleagues; and especially for people that might inherit a project from you in the future.</p>

<p>Once you&rsquo;ve used <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> to create a custom template, you can create new files based on this template. The new files can include Objective-C headers and implementation files, interface builder files (.xib and .storyboard), as well as Swift source files.</p>

<p>It really adds benefit when there&rsquo;s a particular class that you commonly subclass, especially if the new subclass requires an interface builder counterpart.</p>

<p>Of course you would want to document your project to explain that you have defined custom templates, which can be used with the <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> plugin. But if one of your co-workers doesn&rsquo;t have the plugin, then it doesn&rsquo;t matter. No harm done, it just means they won&rsquo;t reap the benefits. And you can spend longer on your tea break, while they&rsquo;re spending longer doing things manually!</p>

<!-- More -->


<h1>Creating a custom file template, by example</h1>

<p>In a hypothetical social-network-like project, I have an abstract <code>SectionViewController</code> class, which will be subclassed for various sections of the app. For example, we have a <code>FriendsSectionViewController</code> and in the future we might want to add a <code>GroupsSectionViewController</code> and an <code>EventsSectionViewController</code>.</p>

<p>The <code>SectionViewController</code> interface looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">SectionViewController</span> : <span class="bp">UIViewController</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="bp">UITableView</span> <span class="o">*</span><span class="n">tableView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">Section</span> <span class="o">*</span><span class="n">section</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// may be implemented in subclasses, invoked when a table cell is selected.</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didSelectItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s implementation takes care of the table&rsquo;s data source using the specified <code>Section</code> object, and implements the necessary delegate methods.</p>

<p>Subclasses are simply expected to implement the <code>-didSelectItemAtIndexPath:</code> method as described in the interface. Each subclass will also have its own storyboard file, which must link up a <code>UITableView</code> to the outlet in the superclass and provide a prototype cell with a specific reuse identifier. The <code>UITableView</code> will also hook up its <code>delegate</code> and <code>dataSource</code> outlets to the view controller.</p>

<p>In order to create a new subclass, say <code>GroupsSectionViewController</code>, I would need to create the new class files (<code>.h</code> and <code>.m</code>) and create separately the new storyboard file. In the implementation, I would need to override the <code>-didSelectItemAtIndexPath:</code> method. In the storyboard, I would need to add a new view controller, embedded in a navigation controller; add a <code>UITableView</code> and hook it up to the outlet; hook up the table&rsquo;s <code>delegate</code> and <code>dataSource</code> outlets; and add a prototype cell and give it the necessary reuse identifier, as required by the <code>SectionViewController</code> implementation. Sounds tedious!</p>

<h2>Simplifying repetitive tasks</h2>

<p>This is where <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> comes in. We can create a template based on an existing subclass of <code>SectionViewController</code>, to simplify adding a new section in the future. This will not only save my time, but make it much easier for a new joiner to get up to speed with the project and get stuck in making a new section, following the pattern that already exists in the project.</p>

<p>Simply select the files that you wish to base your template upon, and select the new option to <em>New Template from Selection</em>, as in the image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/create-new-template.jpg" title="Create File Template from Group" alt="images"></p>

<p>In the options window that is presented, I&rsquo;ll leave the <em>Interface or protocol</em> option as &ldquo;interface FriendsSectionViewController&rdquo;, because this is the interface I wish to make a template from (it&rsquo;s the only interface defined in the selected files).</p>

<p>I&rsquo;ll change the <em>New will inherit from</em> option to &ldquo;SectionViewController&rdquo; because this is what I want newly created files to inherit from. (I don&rsquo;t want them to inherit from FriendsSectionViewController.)</p>

<p>The <em>Template name</em> is defaulted to &ldquo;SectionViewController&rdquo; so I&rsquo;ll leave that, and I&rsquo;ll add a useful description so people know what it is in the future. I&rsquo;ll leave all other options as the defaults. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/create-template-options.jpg" title="Template Creation Options" alt="images"></p>

<p>You will then be presented with the template files for you to edit. Ensure you don&rsquo;t modify the parts of the code that have references like <code>___FILEBASENAMEASIDENTIFIER___</code>, as this is what Xcode will replace when you use your template in the future.</p>

<p>Remove any functionality that is specific to the class you used to create the template. Leave stubs of methods that you expect to be implemented in new classes that you create based on your template. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/editing-new-template.jpg" title="Editing The Template" alt="images"></p>

<p>If your template includes an Interface Builder file, the template file will be presented in a separate window. Remove any views or controllers that are specific to the class you used to create the template. You can leave outlets connected and don&rsquo;t modify the custom class <code>___FILEBASENAMEASIDENTIFIER___</code>. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/editing-ui-template.jpg" title="Editing Interface Builder Template" alt="images"></p>

<p>After following the instructions that are presented to you in an Xcode window, make your changes to the template files, close the window(s) and return to your project.</p>

<p>That&rsquo;s it! You&rsquo;ve now created your own custom file template. It will be saved under your project&rsquo;s directory (under the <code>StencilPlugin</code> subdirectory), so you can commit it to source control.</p>

<h1>Using your template to create a new file</h1>

<p>So far in my project, I only have a <code>FriendsSectionViewController</code>. Now it&rsquo;s time to add a <code>GroupsSectionViewController</code>. To use the template created above, simply right-click in the Project Navigator and select <em>New File from Custom Template&hellip;</em>. This will present all templates that are associated with this project. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/new-from-template.jpg" title="New File from Custom Template" alt="images"></p>

<p>Select the <code>SectionViewController</code> template created previously. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/select-custom-template.jpg" title="Selecting Custom Template" alt="images"></p>

<p>Give your new class a name, in my case this will be <code>GroupsSectionViewController</code>. Your new files will be created, just like usual. You&rsquo;ll see the code files and the Interface Builder files all present in the Project Navigator. The storyboard file has the <code>UITableView</code> hooked up, as well as its <code>delegate</code> and <code>dataSource</code>. The code files have stubs of the methods that I&rsquo;m expected to implement in the new subclass. See image below.</p>

<p><img class="center" src="http://samdods.github.io/images/stencil/new-files-created.jpg" title="New Files Created" alt="images"></p>

<h1>Conclusion</h1>

<p><a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> may not provide benefit to every kind of project. But generally &ndash; if extending the app means that you frequently subclass a particular class &ndash; then you can find benefits in using the <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> plugin. You might find yourself subclassing a <code>WidgetView</code> for example, it&rsquo;s much quicker to use <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> to produce your new files, which may include a <code>.xib</code> file. And it makes it immediately clear to people joining the project in the future what methods are expected to be implemented in new subclasses.</p>

<h1>Get Stencil</h1>

<p>See the <a href="http://samdods.github.io/stencil-xcode-plugin/">Stencil</a> website.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift Alternatives to C Macros (Part I)]]></title>
    <link href="http://samdods.github.io/blog/2015/04/06/swift-alternatives-to-c-macros/"/>
    <updated>2015-04-06T22:05:57+01:00</updated>
    <id>http://samdods.github.io/blog/2015/04/06/swift-alternatives-to-c-macros</id>
    <content type="html"><![CDATA[<p>Love them or hate them, macros are an integral part of C development, and are widely used throughout the Objective-C Cocoa and Cocoa Touch frameworks. If you&rsquo;ve ever used <code>NSAssert</code>, then you&rsquo;ve used a macro. (And if you haven&rsquo;t, then what have you been doing?!)</p>

<p>Now please bear with me&hellip; before all you macro-haters completely disregard this blog post, this is not another one of those posts that explains the trivial procedure of re-writing a function-like macro as a function in Swift. Nor will I show the Swift alternative to a macro definition of a primitive constant, as I&rsquo;ve seen in other recent posts within the community.</p>

<p>In this short series, I&rsquo;m going to look at some of the more creative uses of C macros and investigate how we could use some of Swift&rsquo;s advanced language features to accomplish the same results.</p>

<!-- More -->


<h1>Misuse of macros</h1>

<p>I have come across a few blog posts recently which take various types of Objective-C macro and find alternative solutions in Swift. But every macro discussed could have been written as a function (or even worse declared as a constant) in Objective-C in the first place, so would be trivial to convert to Swift. I was going crazy staring at the screen in disbelief of people converting macros such as the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define SQUARE_NUMBER(n) n * n</span>
</span></code></pre></td></tr></table></div></figure>


<p>The blog post failed to point out that the Objective-C developer that wrote this macro in the first place should have been shot in the head with a <a href="http://nerf.hasbro.com/en-us">Nerf</a> gun and sent back to junior school. There is so much wrong with that macro, I don&rsquo;t want to waste any more of my life discussing it.</p>

<p>I don&rsquo;t condone or encourage the use of macros in Objective-C where functions or constants could be used instead, and I don&rsquo;t think that any other iOS developer should do so either. And I certainly don&rsquo;t think the Objective-C community should be encouraging this by promoting or linking to this type of blog post.</p>

<p>There is never a need to write a function-like macro in Objective-C. If you&rsquo;re worried about performance (of calling out to a function), then there&rsquo;s no need. Cocoa provides the macros <code>NS_INLINE</code>, <code>CF_INLINE</code>, etc. which mean that your friend the compiler will decide whether it&rsquo;s appropriate to expand the function definition in-line. See the definition of the <code>CGRectMake</code> function for example. And there is certainly no need to <code>#define</code> primitive constants!</p>

<p>Yet even <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_19">Apple&rsquo;s documentation</a> seems to condone the use of primitive constants being declared as a macro. By the time I read this, I was getting pretty fed up. Why is everyone, including Apple, encouraging the misuse of macros?!</p>

<p>Apple&rsquo;s example below should never have been written as a macro in the first place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define FADE_ANIMATION_DURATION 0.35</span>
</span></code></pre></td></tr></table></div></figure>


<p>It provides no type-safety and it won&rsquo;t be available to interrogate in the debugger. There&rsquo;s a real danger this type of macro could be misused and lead to hard-to-diagnose bugs. In short, it&rsquo;s code smell that should be avoided at all times, with no excuses.</p>

<h1>So are macros ever acceptable?</h1>

<p>Some people would probably argue the fact that it&rsquo;s never acceptable to use macros. I would encourage those people to read on because you might discover some cool tricks!</p>

<p>I wrote recently about KVC collection operators and <a href="http://samdods.github.io/blog/2014/07/25/collection-operators-done-properly/">how to use them safely</a>. In that post, I discuss the use of macros to provide compile-time checking on the keys used in key-value coding.</p>

<p>Consider the following example interfaces:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Account</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="kt">double</span> <span class="n">balance</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Transaction</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="n">Account</span> <span class="o">*</span><span class="n">account</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="kt">double</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can use KVC collection operators to simplify retrieval of transaction characteristicts from an array of <code>Transaction *</code> objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">minimumValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;@min.value&quot;</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">maximumAccountBalance</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;@max.account.balance&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">accounts</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;unionOfObjects.account&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">accounts</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;account&quot;</span><span class="p">];</span> <span class="c1">// same as above</span>
</span></code></pre></td></tr></table></div></figure>


<p>I haven&rsquo;t used a macro yet! But I can use macros as defined in <a href="http://samdods.github.io/blog/2014/07/25/collection-operators-done-properly/">my other post</a> to perform these operations and get compile-time checking of the key paths with code-completion <em>and</em> syntax highlighting! (The highlighter on my blog doesn&rsquo;t display it as nicely as Xcode does.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">double</span> <span class="n">minimumValue</span> <span class="o">=</span> <span class="n">DZLMinimum</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">double</span> <span class="n">maximumAccountBalance</span> <span class="o">=</span> <span class="n">DZLMaximum</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">account</span><span class="p">.</span><span class="n">balance</span><span class="p">);</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">accounts</span> <span class="o">=</span> <span class="n">DZLUnionOfObjects</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">account</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the key paths are not enclosed in quotes. This is due to how they are expanded at compile time to be verified and then turned into strings to pass to <code>-valueForKeyPath:</code>.</p>

<p>So a macro that adds compile-time validation and code-completion to an otherwise crash-prone interface is, in my opinion, a decent example of when to use macros in Objective-C.</p>

<h1>How does this type of macro translate to Swift?</h1>

<p>In the macros above, we pass the type expected in the array, namely <code>Transaction *</code> and pass the key path that we want to extract. In Swift, the type of objects in an array is mandatory when you declare the array, and we can extract information using the <code>map</code> or <code>reduce</code> functions.</p>

<p>For example, the above can be re-written in Swift as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">minimumValue</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">map</span><span class="p">({</span><span class="err">$</span><span class="mf">0.</span><span class="n">value</span><span class="p">}).</span><span class="n">reduce</span><span class="p">(</span><span class="n">Int</span><span class="p">.</span><span class="n">min</span><span class="p">,</span> <span class="p">{</span><span class="n">max</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)})</span>
</span><span class='line'><span class="k">var</span> <span class="n">maximumValue</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">map</span><span class="p">({</span><span class="err">$</span><span class="mf">0.</span><span class="n">account</span><span class="p">.</span><span class="n">balance</span><span class="p">}).</span><span class="n">reduce</span><span class="p">(</span><span class="n">Int</span><span class="p">.</span><span class="n">max</span><span class="p">,</span> <span class="p">{</span><span class="n">min</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)})</span>
</span><span class='line'><span class="k">var</span> <span class="n">accounts</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span><span class="err">$</span><span class="mf">0.</span><span class="n">account</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can read up on these functions in <a href="https://developer.apple.com/library/ios/documentation/General/Reference/SwiftStandardLibraryReference/Array.html">Apple&rsquo;s documentation</a>. I also use the shorthand name of the first closure argument <code>$0</code>, which is also discussed in <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html">Apple&rsquo;s documentation</a>.</p>

<p>But you could easily argue that the above is a little long-winded, in which case you could simplify it by extending <code>Array</code>. I&rsquo;ve shown how to do this for the <code>minimum</code> below, but it could be easily modified for <code>maximum</code>, or <code>average</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">extension</span> <span class="n">Array</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">func</span> <span class="n">mapMinimum</span><span class="o">&lt;</span><span class="nl">U</span> <span class="p">:</span><span class="n">Comparable</span><span class="o">&gt;</span><span class="p">(</span><span class="nl">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">mapped</span><span class="p">:</span><span class="n">Array</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="n">transform</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mapped</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="nb">nil</span> <span class="o">:</span> <span class="n">mapped</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">mapped</span><span class="p">.</span><span class="n">first</span><span class="o">!</span><span class="p">,</span> <span class="p">{</span> <span class="n">max</span><span class="p">(</span><span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above extension, I&rsquo;m defining the <code>mapMinimum</code> function, which can be invoked on an array whose members all conform to the <code>Comparable</code> protocol (in order to be passed into the <code>max</code> function). It returns the minimum of the members of the array resulting from calling <code>transform(x)</code> on all members <code>x</code> of <code>self</code>. In other words, it performs the <code>map</code> function with the given closure, and then returns the minimum of the resulting array.</p>

<p>Having declared the same for maximum, I can now use them as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">minimumValue</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">mapMinimum</span> <span class="p">{</span><span class="err">$</span><span class="mf">0.</span><span class="n">value</span><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">maximumAccountBalance</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">mapMaximum</span> <span class="p">{</span><span class="err">$</span><span class="mf">0.</span><span class="n">account</span><span class="p">.</span><span class="n">balance</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the syntax is actually improved in Swift compared to the macros I defined in Objective-C. The key path is validated by the compiler, because it knows what types of object are contained in the <code>transactions</code> array.</p>

<h1>Next time&hellip;</h1>

<p>I&rsquo;ll be investigating more of what I consider &ldquo;valid&rdquo; uses of macros and how we can achieve the same result using the advanced language features of Swift.</p>

<p>If you&rsquo;ve enjoyed reading this article, please <a href="http://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same. I&rsquo;m happy to discuss this or any other subject in more depth, so feel free to contact me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Intercept Delegate Messages if You Are Not the Delegate]]></title>
    <link href="http://samdods.github.io/blog/2014/08/03/secondary-delegate/"/>
    <updated>2014-08-03T13:45:25+01:00</updated>
    <id>http://samdods.github.io/blog/2014/08/03/secondary-delegate</id>
    <content type="html"><![CDATA[<p>I recently found myself in a situation where I needed to listen out for changes to a UIScrollView of which I couldn’t set the delegate. My situation was with the underlying UIScrollView of a UIWebView instance, but there are other situations where you might want to receive delegate method calls from an object for which you are not allowed to set the delegate.</p>

<p>The problem is that UIWebView exposes its underlying UIScrollView, but it would be bad etiquette to set its delegate, because you are not the owner of the UIScrollView instance and you don’t know the implementation of UIWebView.</p>

<p>So, the question is: how can we listen out for the delegate messages from a UIScrollView, when we are not acting as the delegate?</p>

<!-- More -->


<p>One solution would be to use KVO. But it wouldn&rsquo;t be possible to implement <code>-scrollViewWillEndDragging:withVelocity:targetContentOffset:</code> using KVO.</p>

<h1>Secondary Delegate</h1>

<p>So I propose adding a <code>secondaryDelegate</code> property in a category on UIScrollView. This category will implement the <code>-setSecondaryDelegate:</code> method, which can be called from the app (from a view controller, say).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">UIScrollView</span> <span class="nl">(SecondaryDelegate)</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">weak</span><span class="p">)</span> <span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span> <span class="n">secondaryDelegate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So for example, my view controller can set itself as the “delegate” of its web view’s UIScrollView as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">webView</span><span class="p">.</span><span class="n">scrollView</span><span class="p">.</span><span class="n">secondaryDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By setting the <code>secondaryDelegate</code> property, the category’s setter method actually overrides the <code>delegate</code> property with a <code>delegateProxy</code> object. This proxy object holds a weak reference to the original (overridden) delegate and to the secondary delegate provided.</p>

<h1>Delegate Proxy</h1>

<p>The delegate proxy is responsible for forwarding messages to the relevant delegates. The proxy holds a weak reference to each delegate. This means it is perfectly acceptable for the UIScrollView to hold a strong reference to the proxy by way of associated object (explained in more detail later).</p>

<p>The proxy object is a subclass of NSProxy and conforms to the UIScrollViewDelegate protocol, so it must implement the following methods: <code>-methodSignatureForSelector:</code> and <code>-forwardInvocation:</code>.</p>

<p>We’ll also implement the <code>-respondsToSelector:</code> method, because we know our proxy will be used as the delegate of a UIScrollView, which will check if the delegate responds to each selector before calling that selector.</p>

<p>To determine the method signature for a selector, we can just ask each delegate and return when we find one that can provide what we need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSMethodSignature</span> <span class="o">*</span><span class="p">)</span><span class="nf">methodSignatureForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">NSObject</span> <span class="o">*</span><span class="n">delegateForResonse</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">primaryDelegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">]</span> <span class="o">?</span> <span class="nb">self</span><span class="p">.</span><span class="nl">primaryDelegate</span> <span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">secondaryDelegate</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">delegateForResonse</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">]</span> <span class="o">?</span> <span class="p">[</span><span class="n">delegateForResonse</span> <span class="nl">methodSignatureForSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">]</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To determine if the proxy can respond to a selector, again we just check each delegate and return <code>YES</code> if one of them can respond.</p>

<p>Before calling one of its optional delegate methods the UIScrollView (or anyone else for that matter) asks its delegate if it can respond to the selector. If it replies with <code>YES</code>, then it will send the message. But because we have set the <code>delegate</code> property to our <code>delegateProxy</code> object, this message will arrive as an invocation in the <code>-forwardInvocation:</code> method.</p>

<p>We should implement this method as follows in order to forward the invocation to each delegate in turn (if it can respond to the selector).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">forwardInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">invokeInvocation</span><span class="p">:</span><span class="n">invocation</span> <span class="nl">onDelegate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">primaryDelegate</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">invokeInvocation</span><span class="p">:</span><span class="n">invocation</span> <span class="nl">onDelegate</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">secondaryDelegate</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">invokeInvocation:</span><span class="p">(</span><span class="bp">NSInvocation</span> <span class="o">*</span><span class="p">)</span><span class="nv">invocation</span> <span class="nf">onDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">delegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">([</span><span class="n">delegate</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">invocation</span><span class="p">.</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">invocation</span> <span class="nl">invokeWithTarget</span><span class="p">:</span><span class="n">delegate</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>The UIScrollView Category</h1>

<p>For completeness, I’ve added the code for the category, with comments below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 1. Private interface extension</span>
</span><span class='line'><span class="k">@interface</span> <span class="bp">UIScrollView</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">TABScrollViewDelegateProxy</span> <span class="o">*</span><span class="n">delegateProxy</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="bp">UIScrollView</span> <span class="nl">(SecondaryDelegate)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. Setter</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setSecondaryDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">secondaryDelegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span> <span class="o">=</span> <span class="p">[</span><span class="n">TABScrollViewDelegateProxy</span> <span class="n">alloc</span><span class="p">];</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span><span class="p">.</span><span class="n">primaryDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span><span class="p">.</span><span class="n">secondaryDelegate</span> <span class="o">=</span> <span class="n">secondaryDelegate</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3. Getter</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="bp">UIScrollViewDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">secondaryDelegate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">delegateProxy</span><span class="p">.</span><span class="n">secondaryDelegate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 4. Associated object</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setDelegateProxy:</span><span class="p">(</span><span class="n">TABScrollViewDelegateProxy</span> <span class="o">*</span><span class="p">)</span><span class="nv">delegateProxy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">delegateProxy</span><span class="p">),</span> <span class="n">delegateProxy</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">TABScrollViewDelegateProxy</span> <span class="o">*</span><span class="p">)</span><span class="nf">delegateProxy</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">delegateProxy</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>The <code>delegateProxy</code> property is added to the private interface extension. The fact that this category uses a proxy is an implementation detail and should therefore not be exposed in the public interface.</li>
<li>The setter method for the <code>secondaryDelegate</code> property will create the <code>delegateProxy</code> object if it doesn’t already exist and assign it to the <code>delegateProxy</code> property. Next we the <code>primaryDelegate</code> to the original delegate held in <code>self.delegate</code>. Then we set the <code>delegateProxy.secondaryDelegate</code> and override the object held in <code>self.delegate</code>. (Notice how we only call <code>alloc</code> on the proxy class - this is because instances of NSProxy do not by default respond to <code>-init</code>.)</li>
<li>We should provide the getter method for the object. It is just a wrapper around getting it from <code>self.delegateProxy</code>.</li>
<li>We hold a strong reference to the <code>delegateProxy</code> object by using an associated object. The strong reference is fine, because it only holds weak references to each delegate. (Notice the use of <code>@selector(delegateProxy)</code> as the key for the associated object. This is fine because the pointer returned is unique.)</li>
</ol>


<h1>Conclusion</h1>

<p>This solution is clean and robust. It doesn’t involve method swizzling - only message forwarding using a proxy object, which is fine. In fact the only reason we have to import <code>&lt;objc/runtime.h&gt;</code> is to use associated objects.</p>

<p>The public interface is clean - it only provides a single extra property for UIScrollView - the <code>secondaryDelegate</code>.</p>

<p>The only downside to this is that the original delegate must have been set (if it ever will be set) before you set the secondary delegate. Or rather, you cannot set the <code>delegate</code> property after setting the <code>secondaryDelegate</code>. This is because setting the <code>secondaryDelegate</code> overwrites the value of the <code>delegate</code> property. I thought about a solution that adds an observer to listen for changes to the <code>delegate</code> property, but removing the observer on deallocation was not trivial, so I settled on the solution described above, which will not allow the delegate to be set after having set the secondary delegate.</p>

<p>If you found this interesting, please <a href="http://twitter.com/dodsios">follow me on twitter</a>, or <a href="http://samdods.github.io/atom.xml">subscribe to my RSS feed</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theming]]></title>
    <link href="http://samdods.github.io/blog/2014/07/26/theming/"/>
    <updated>2014-07-26T08:03:03+01:00</updated>
    <id>http://samdods.github.io/blog/2014/07/26/theming</id>
    <content type="html"><![CDATA[<p>Many of the projects on which I&rsquo;ve worked have had the problem of &ldquo;theming&rdquo;, because it&rsquo;s difficult to keep a project&rsquo;s codebase clean when dealing with multiple themes. When I refer to a &ldquo;theme&rdquo; I mean something that only affects the look and feel of an app, but not the functionality.</p>

<p>By &ldquo;theming&rdquo;, I&rsquo;m referring to a project that might have different targets, each with different colour schemes, fonts, sizes, etc. to deliver a different user experience with the same functionality.</p>

<p>But theming can be extended to a single app, with a single theme, where different interface builder (nib/xib) files are backed by a single class. This might be as simple as having a different interface file (or nib) for iPad as opposed to iPhone, where each nib is backed by the same class.</p>

<p>Theming is often even more complex. For example, I might have an app that can display the same content in various forms. A news app, for example, might have a timeline in which it displays article teasers as either: a small widget with headline only; a double-height, more-impactful widget with headline and thumbnail image; a double-height widget with headline and article summary. That&rsquo;s three nibs, and I&rsquo;ll also need each one styled slightly differently whether it&rsquo;s on iPad or iPhone. So that&rsquo;s six nibs all backed by a single class!</p>

<p>In this article, I&rsquo;ll discuss my latest solution to &ldquo;theming&rdquo; using <a href="http://samdods.github.io/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder/">User Defined Runtime Attributes</a>. <!--more--></p>

<h1>Theming with User Defined Runtime Attributes</h1>

<p>Using user defined runtime attributes, you can specify the aesthetic settings of a user interface exactly at the point at which it matters, in Interface Builder. I&rsquo;m a firm believer in the <a href="http://effectivesoftwaredesign.com/2012/02/05/separation-of-concerns/">separation of concerns</a>, and therefore I think the best place to configure an interface is in Interface Builder.</p>

<p>The objective is to be able to do something like so to specify how the app should display my view:</p>

<p><img class="center" src="http://samdods.github.io/images/interface-builder-guidance.png" title="Configuring a themed view in Interface Builder" alt="images"></p>

<p>In the example above, I&rsquo;ve set the value of the &ldquo;themeTextAttributes&rdquo; key to <code>articleWidgetTitle.iPhone.large</code>. I&rsquo;ll use this key-value pair later, but what&rsquo;s important at this stage is that this can be configured differently for each nib.</p>

<p>The ultimate objective is a project that requires no changes in code to change the aesthetics of a view.</p>

<h1>Reading a Theme from a Property List</h1>

<p>One of the traditional theming methods I&rsquo;ve come across is the use of a property list (.plist file) or other resource containing keys and values for fonts, colours, etc. for a particular theme.</p>

<p>I first came across this approach from the <a href="http://twinlogix.com/en/blog/how-create-multiple-themes-ios-apps">Twinlogix blog post</a> written by Alex Reggiani, in which he uses a plist file to reference each of his interface elements. His plist appears to contain one huge list of keys for various UI elements &ndash; of which there may be hundreds in a larger app &ndash; and I think this makes it very difficult to find the element you&rsquo;re looking for when you want to modify something. In the <a href="http://twinlogix.com/en/blog/how-create-multiple-themes-ios-apps-part-ii">second part</a> of Alex&rsquo;s article, he concludes that the best approach is to specify in the nib&rsquo;s user defined runtime attributes the font name and size for a UI element. I personally don&rsquo;t think this approach provides any benefit over using Interface Builder&rsquo;s attribute inspector.</p>

<p>I have also seen a very good implementation of the plist approach by <a href="https://twitter.com/shaps">Shaps </a>, but again this results in a very long list of keys in a dictionary, which I personally find hard to maintain. And the technique I will describe below means that all this configuration can come from inside Interface Builder, rather than in view or view controller code.</p>

<p>Now consider the fictional apps <em>Sam&rsquo;s Mega Lucky Bingo</em> and <em>Jurassic Bingo Legends</em>, which are both built from the same codebase with exactly the same user interface. Their only difference is the colour scheme and fonts used throughout each app. For these apps, I would create a different plist for each app and compile the corresponding plist into the bundle at build time, resulting in a different look and feel. An example plist file might look like so:</p>

<p><img class="center" src="http://samdods.github.io/images/plist-example.png" title="Example Theme Plist" alt="images"></p>

<p>I think this is a realy nicely structured plist, in which I can group components at various levels, so they can be easily located, along with the device type on which it will appear, and the form it will take.</p>

<p>Now I would likely have a helper class from which I can request the font, text colour and line spacing for a particular user interface element. For example, in the <code>-awakeFromNib</code> method of my <code>ArticleWidgetView</code> class, I would setup the view as follows:</p>

<figure class='code'><figcaption><span>ArticleWidgetView.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">element</span> <span class="o">=</span> <span class="s">@&quot;articleWidgetTitle.iPhone.large&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">Theme</span> <span class="nl">fontForElement</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">titleLabel</span><span class="p">.</span><span class="n">textColour</span> <span class="o">=</span> <span class="p">[</span><span class="n">Theme</span> <span class="nl">colorForElement</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// line-spacing will be used when setting the attributedText property.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Theme</code> class helper methods will look up the values for the relevant properties in the plist dictionary. The implementation of the <code>+fontForElement:</code> method might look like so (after having read the plist into a dictionary on app launch):</p>

<figure class='code'><figcaption><span>Theme.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">UIFont</span> <span class="o">*</span><span class="p">)</span><span class="nf">fontForElement:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">element</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">textAttributes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Theme</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">plistDictionary</span><span class="p">][</span><span class="s">@&quot;Text Attributes&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">elementDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">textAttributes</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">fontName</span> <span class="o">=</span> <span class="n">elementDictionary</span><span class="p">[</span><span class="s">@&quot;fontName&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">fontSize</span> <span class="o">=</span> <span class="p">[</span><span class="n">elementDictionary</span><span class="p">[</span><span class="s">@&quot;fontSize&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSAssert</span><span class="p">(</span><span class="n">fontName</span><span class="p">,</span> <span class="s">@&quot;Font not found for element %@&quot;</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">fontName</span> <span class="o">?</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">fontWithName</span><span class="p">:</span><span class="n">fontName</span> <span class="nl">size</span><span class="p">:</span><span class="n">fontSize</span><span class="p">]</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the <code>element</code> string passed into the method takes the form of a key path (keys separated by dots), I can pass this directly to the dictionary to get the object at the end of the path. So in my <code>-awakeFromNib</code> method, I pass in the string <code>@"articleWidgetTitle.iPhone.large"</code>, which I use as the string in <code>-valueForKeyPath:</code> method above. This is effectively the same as doing <code>textAttributes[@"articleWidgetTitle"][@"iPhone"][@"large"]</code>.</p>

<p>The downside to what we&rsquo;ve seen so far is that in your class implementation you need to know the &ldquo;element name&rdquo; that you will pass to the <code>Theme</code> class helper methods.</p>

<h1>Separating Concerns</h1>

<p>Now the objective is to strip out any interface-configuration logic from the view class. I don&rsquo;t really want the <code>ArticleWidgetView</code> class to care about the theme at all. It is loaded from a nib, so why should there be any further configuration required in the implementation?</p>

<p>That&rsquo;s when we get back to user defined runtime attributes. As shown before, I&rsquo;ve configured my view in Interface Builder with the following runtime attributes:</p>

<p><img class="center" src="http://samdods.github.io/images/runtime-attributes.png" title="Runtime Attributes in Interface Builder" alt="images"></p>

<p>Now as soon as I run this project, it&rsquo;s going to crash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*** Terminating app due to uncaught exception <span class="s1">&#39;NSUnknownKeyException&#39;</span>,
</span><span class='line'>reason: <span class="s1">&#39;[&lt;UILabel 0x993b840&gt; setValue:forUndefinedKey:]:</span>
</span><span class='line'><span class="s1">this class is not key value coding-compliant for the key themeTextAttributes.&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can easily fix this by implementing the necessary method in a category on UILabel, as follows:</p>

<figure class='code'><figcaption><span>UILabel+Theme.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setThemeTextAttributes:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">element</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">Theme</span> <span class="nl">fontForElement</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">Theme</span> <span class="nl">colorForElement</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CGFloat</span> <span class="n">lineSpacing</span> <span class="o">=</span> <span class="p">[</span><span class="n">Theme</span> <span class="nl">lineSpacingForElement</span><span class="p">:</span><span class="n">element</span><span class="p">];</span>
</span><span class='line'>  <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">themeLineSpacing</span><span class="p">),</span> <span class="l">@(</span><span class="n">lineSpacing</span><span class="l">)</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">themeLineSpacing</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">)</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By simply having this category exist in the project, all instances of <code>UILabel</code> will be able to respond the <code>setThemeTextAttributes:</code> method, which means I can use the key <code>themeTextAttributes</code> in Interface Builder&rsquo;s user defined runtime attributes.</p>

<p>In the code snippet above, I&rsquo;m also setting an associated object on the UILabel instance, which will hold the line spacing as specified in the theming plist. I can use this property when setting attributed text on the label in the view&rsquo;s implementation. I will define the category header as follows:</p>

<figure class='code'><figcaption><span>UILabel+Theme.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="bp">UILabel</span> <span class="nl">(Theme)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">themeLineSpacing</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I do not need to publicly expose the <code>setThemeTextAttributes:</code> method in the interface.</p>

<p>Now I can configure all my labels in Interface Builder with no need to clutter the view or view controller code with unnecessary aesthetics code. I can add further categories for <code>UITextView</code>, <code>UIView</code> and other UIKit classes so that I can set the keys for their aesthetic properties in Interface Builder - where interface configuration belongs!</p>

<h1>Demo Project</h1>

<p>A demo project is <a href="https://github.com/samdods/DZLThemer">available on GitHub</a>.</p>

<p>I&rsquo;m really keen to hear how other people have tackled theming, so <a href="http://twitter.com/dodsios">talk to me on twitter</a>! Or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collection Operators Done Properly]]></title>
    <link href="http://samdods.github.io/blog/2014/07/25/collection-operators-done-properly/"/>
    <updated>2014-07-25T21:33:59+01:00</updated>
    <id>http://samdods.github.io/blog/2014/07/25/collection-operators-done-properly</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>Foundation&rsquo;s <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/CollectionOperators.html">KVC Collection Operators</a> are often overlooked and underused, but for those in the know they are a powerful tool to have in your Cocoa shed.
The obvious advantage is their consicion, but the big disadvantage is that we don&rsquo;t get compile-time errors when we misuse them and nor do we get code-completion. And herein lies the problem.
In this article I&rsquo;ll discuss KVC Collection Operators in more detail and propose a solution to this problem.</p>

<!-- more -->


<h1>The Desirables</h1>

<p>Firstly, we should be explicit about what types of objects we expect to be in the collection. This should give us code-completion on the key path and an error if the key path doesn&rsquo;t exist on objects of the pre-specified type.</p>

<p>Secondly, some collection operators demand that the key path leads to a specific type of object. For example, <code>@maximum</code> and <code>@minimum</code> require the objects to implement the <code>-compare:</code> method. In these cases, we should get a compile-time error if the key path leads to an object of an invalid type.</p>

<p>Finally, we should only be allowed to use the documented collection operators, and we should get compile-time errors if we try to use an undefined operator.</p>

<h1>Some Background</h1>

<p>Collection operators have been talked about a lot, but still I see them rarely used. Do people just forget about them? <a href="http://nshipster.com/kvc-collection-operators/">NSHipster</a> has given an overview of them and Nicolas Bouilleaud has gone into tremendous detail and even <a href="http://bou.io/KVCCustomOperators.html">implemented his own</a>, albeit using an undocumented &lsquo;feature&rsquo; of Cocoa.</p>

<p>I&rsquo;m not going to repeat what everyone else has written about, and I&rsquo;m not going to compete with NSHipster :)</p>

<p>As always <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/CollectionOperators.html">the documentation</a> is a great place to read up on the topic.</p>

<h1>Proposing A Solution</h1>

<h2><strong>Attempt #1</strong></h2>

<p>I had a few different ideas about how I would like to make this more explicit and achieve what I set out in The Desirables.</p>

<p>The first approach was using a proxy object and a category on <code>NSArray</code> like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">transactions</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// traditional way</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">total</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;@sum.amount&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// my new way:</span>
</span><span class='line'><span class="n">DZLCollectionProxy</span> <span class="o">*</span><span class="n">sumProxy</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">total</span> <span class="o">=</span> <span class="n">sumProxy</span><span class="p">[</span><span class="s">@&quot;amount&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or more simply:</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">total</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">sum</span><span class="p">[</span><span class="s">@&quot;amount&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// and we could get all the payees&#39; distinct accounts like so:</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">payees</span> <span class="o">=</span> <span class="n">transactions</span><span class="p">.</span><span class="n">distinctUnionOfObjects</span><span class="p">[</span><span class="s">@&quot;payee.account&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This requires <code>-sum</code>, <code>-unionOfObjects</code> and all other collection operators to be defined in the category on <code>NSArray</code>, <code>NSSet</code>, etc.</p>

<p>These methods return a proxy object which internally knows which collection operator to perform. The proxy class implements <code>-objectForKeyedSubscript:</code>, which allows us to pass the key path in square brackets. See NSHipster&rsquo;s explanation of <a href="http://nshipster.com/object-subscripting/">Custom Object Subscripting</a>.</p>

<p>The nice thing about this is that it is explicit in its use of the collection operator and for that we will get a compile-time error. But the key path can still be undefined.</p>

<h2><strong>Attempt #2</strong></h2>

<p>I want the key path to be written outside of a string so that we can get code-completion and compile-time errors if the key path is undefined on the objects of a pre-specified type.</p>

<p>Assuming I create my proxy object with the <code>-each</code> method, what about if we cast the proxy object to the type of object inside the collection? Then we can specify at the end of the key path which operator to use. Something like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">payees</span> <span class="o">=</span> <span class="p">[(</span><span class="kt">id</span><span class="p">)((</span><span class="n">Transaction</span> <span class="o">*</span><span class="p">)</span><span class="n">transactions</span><span class="p">.</span><span class="n">each</span><span class="p">).</span><span class="n">payee</span> <span class="n">unionOfObjects</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>I convert to <code>id</code> here so that the compiler will allow me to send <code>-unionOfObjects</code> to a <code>Payee *</code>, but I could also declare this method in a category on <code>NSObject</code>.</p></blockquote>

<p>This approach would return a new proxy object for each key in the path, storing the original collection object and keeping a track of the key path. It achieves this by implementing <code>-resolveInstanceMethod:</code>, and methods for all collection operators: <code>-unionOfObjects</code>, etc.</p>

<p>I like this solution, because it provides code-completion and compile-time errors. But it has a major disadvantage&hellip;</p>

<p>Collection operators treat methods (including property getters) that return <code>NSNumber *</code> and <code>double</code> as if they were the same. For example, if the <code>Transaction *</code> class had the following properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">amount</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSNumber</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could use collection operators on a group of transactions like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">totalAmount</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;@sum.amount&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">totalValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">transactions</span> <span class="nl">valueForKeyPath</span><span class="p">:</span><span class="s">@&quot;@sum.value&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if I want to use my new solution on the <code>value</code> object I can do so like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">totalValue</span> <span class="o">=</span> <span class="p">((</span><span class="n">Transaction</span> <span class="o">*</span><span class="p">)</span><span class="n">transactions</span><span class="p">.</span><span class="n">each</span><span class="p">).</span><span class="n">value</span><span class="p">.</span><span class="n">sum</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks great right? Simple, explicit, consice. Does what it says on the tin.</p>

<p>But this won&rsquo;t work with the <code>amount</code> property. Even though at runtime it would be fine (because the <code>value</code> method would be implemented dynamically by my proxy object and return another proxy object), the compiler is never going to let me send the <code>-sum</code> message to something of type <code>CGFloat</code>.</p>

<p>I can get around this by having another class that does the operations and takes proxy objects as parameters to its methods. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">totalValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">DZLCollectionOperator</span> <span class="nl">sumNumber</span><span class="p">:((</span><span class="n">Transaction</span> <span class="o">*</span><span class="p">)</span><span class="n">transactions</span><span class="p">.</span><span class="n">each</span><span class="p">).</span><span class="n">value</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">totalAmount</span> <span class="o">=</span> <span class="p">[</span><span class="n">DZLCollectionOperator</span> <span class="nl">sumDouble</span><span class="p">:((</span><span class="n">Transaction</span> <span class="o">*</span><span class="p">)</span><span class="n">transactions</span><span class="p">.</span><span class="n">each</span><span class="p">).</span><span class="n">amount</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>At runtime, the pointer for the proxy object returned by the <code>-amount</code> method will be passed to the <code>-sumFloat:</code> method as a <code>double</code>. But it can be used by converting it as so, although admittedly it&rsquo;s massively hacky!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">id</span> <span class="n">proxyObj</span> <span class="o">=</span> <span class="p">(</span><span class="k">__bridge</span> <span class="kt">id</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">aDouble</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This solution now also has the advantage of checking at compile-time that the properties are of the correct type for these methods.</p>

<p>But it&rsquo;s a really hacky approach and we still don&rsquo;t get validation on objects that must implement the <code>-compare:</code> method.</p>

<h2><strong>Attempt #3 (Final)</strong></h2>

<p>Macros. It&rsquo;s simple, all we need to do is define some macros that do all the validation and are written in such a way that Xcode will give us code-completion on the key path.</p>

<p>We can use the fact that Xcode is constantly compiling your code as you write it to check for errors. This means that as we use a macro, its already going through the preprocessor as we write it.</p>

<p>My finally proposed solution looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">average</span> <span class="o">=</span> <span class="n">DZLAverage</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'><span class="bp">NSDate</span> <span class="o">*</span><span class="n">latestDate</span> <span class="o">=</span> <span class="n">DZLMaximum</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">date</span><span class="p">);</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">accounts</span> <span class="o">=</span> <span class="n">DZLUnionOfObjects</span><span class="p">(</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">payee</span><span class="p">.</span><span class="n">account</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checks are automatically carried out on <code>DZLMinimum</code> and <code>DZLMaximum</code>. But I provide extra macros for extra checks for the operators that can process numeric values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">DZLSumDouble</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'><span class="n">DZLSumNumber</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">DZLAverageDouble</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">amount</span><span class="p">);</span>
</span><span class='line'><span class="n">DZLAverageNumber</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">transactions</span><span class="p">,</span> <span class="n">Transaction</span> <span class="o">*</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because of the way the macros are written, we get code-completion, nice syntax highlighting in Xcode, warnings and errors as we write the code, and it is simple, explicit and consice.</p>

<h1>Adopt these macros in your project</h1>

<p>These macros are <a href="https://github.com/samdods/DZLCollectionOperators">avilable on GitHub here</a>, they come as a single header file, so they&rsquo;re super easy to install in your own project.</p>

<p>You can also install it as <a href="http://cocoapods.org/?q=dzlcollectionoperators">a cocoapod</a>!</p>

<p>As always, I love discussing things like this in more depth, so <a href="http://twitter.com/dodsios">tweet me</a>, <a href="http://twitter.com/dodsios">follow me</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing the Limits of User-Defined Runtime Attributes in Interface Builder]]></title>
    <link href="http://samdods.github.io/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder/"/>
    <updated>2014-04-08T19:16:47+01:00</updated>
    <id>http://samdods.github.io/blog/2014/04/08/user-defined-runtime-attributes-in-interface-builder</id>
    <content type="html"><![CDATA[<p>User-defined runtimes attributes in Xcode&rsquo;s Interface Builder are a great way to keep view controller and view code clean, while obeying Separation of Concerns.
They allow you to configure properties on the view or view controller that you are unable to configure from within Interface Builder&rsquo;s <em>Attributes Inspector</em> or <em>Size Inspector</em>.</p>

<p>But sometimes you may want to setup from Interface Builder a scenario which you can&rsquo;t do from simple KVC-compliant property manipulation.</p>

<p>One example I ran into recently was trying to set the content insets on a collection view in a normal view controller in an iPhone-specific storyboard. In Xcode 5.1 you are unable to set the content insets of a collection view (I&rsquo;m not sure in which Xcode version this was first missing - I&rsquo;m sure you used to be able to do it).
So with this feature missinh, it would be nice to be able to do the same thing using user-defined runtime attributes.</p>

<p>Because contentInset is of <code>UIEdgeInsets</code> type, this isn&rsquo;t possible with any of the types defined in Interface Builder under user-defined runtime attributes. But it can be done!</p>

<p>Another example I will show below is how to set the borderColor property of a <code>CALayer</code>, even though the runtime attributes don&rsquo;t support <code>CGColorRef</code> type. All will be explained!</p>

<!-- More -->


<h1>Runtime Attributes Explained</h1>

<p>First a bit of background: user-defined runtime attributes can be set from the <em>Identity Inspector</em> tab in Interface Builder utilities, as shown below:</p>

<p><img class="center" src="http://samdods.github.io/images/user-defined-runtime-attributes.png" title="s Interface Builder" alt="images"></p>

<p>They are defined as a set of key-value pairs. The key is actually a <em>key path</em>, which is a powerful, especially in Interface Builder where you don&rsquo;t have direct access to the underlying <code>CALayer</code> of a <code>UIView</code> (more on this below).</p>

<p>The limitation is that the object&rsquo;s class must be KVC-compliant for the key (or key path) defined in the set of runtime attributes. To be <em>KVC-compliant</em> for a key <code>foo</code> simply means instances of the class must respond to the selector <code>setFoo:</code>.</p>

<blockquote><p>Really, being KVC-compliant for a property means the class should implement the methods required for <code>valueForKey:</code> and <code>setValue:forKey:</code> to work for that property. For user-defined runtime attributes, that means implementing the setter for the property (key).</p></blockquote>

<p>The following property types available for runtime attributes in Interface Builder:</p>

<ul>
<li><strong>Boolean</strong> - translates to a <code>BOOL</code> property</li>
<li><strong>Number</strong> - can translate to any numeric scalar property or a property of type <code>NSNumber *</code></li>
<li><strong>String</strong> - translates to a property of type <code>NSString *</code></li>
<li><strong>Localized String</strong> - the value here is a key to look up in the <code>strings</code> file for the current locale.</li>
<li><strong>Point</strong> - translates to a <code>CGPoint</code> property</li>
<li><strong>Size</strong> - translates to a <code>CGSize</code> property</li>
<li><strong>Rect</strong> - translates to a <code>CGRect</code> property</li>
<li><strong>Range</strong> - translates to an <code>NSRange</code> property</li>
<li><strong>Color</strong> - translates to a property of type <code>UIColor *</code></li>
<li><strong>Nil</strong> - this spectial type doesn&rsquo;t allow you to set a value, it is just a way of specifying that the value should be set to <code>nil</code></li>
</ul>


<blockquote><p>The types <strong>Point</strong> and <strong>Size</strong> can be used interchangeably, because they both map to the same type of C structure (<code>struct {CGFloat v1; CGFloat v2;}</code>).</p></blockquote>

<h1>Some Examples</h1>

<h3>Configuring a CALayer</h3>

<p>A great example of using runtime attributes is to configure a <code>UIView</code>&rsquo;s underlying <code>CALayer</code>. For example, we can set the layer&rsquo;s border width and corner radius as follows:</p>

<p><img class="center" src="http://samdods.github.io/images/calayer-setup.png" title="s underlying layer" alt="images"></p>

<p>Unfortunately, Interface Builder doesn&rsquo;t allow us to set the color of a CALayer, because the <strong>Color</strong> type doesn&rsquo;t translate to properties of <code>CGColorRef *</code> type (workaround discussed below).</p>

<h3>Configuring Custom Controls</h3>

<p>Another example is if you are using a custom <code>UIControl</code> object such as a range slider. A range slider is similar to the built-in slider, but has two thumbs, or knobs: one to specify the minimum value and one to specify the maximum value.
This kind of control would be useful for setting a minimum price and maximum price in a search query. There are <a href="https://github.com/muZZkat/NMRangeSlider">various</a> <a href="http://www.sitepoint.com/wicked-ios-range-slider-part-one/">implementations</a> <a href="https://github.com/barrettj/BJRangeSliderWithProgress">available</a> in the community.</p>

<p>Using user-defined runtime attributes, you can configure such a control right from within Interface Builder. Taking the example of <a href="https://github.com/muZZkat/NMRangeSlider">NMRangeSlider</a>, you could configure the minimum and maximum values for the slider as follows:</p>

<p><img class="center" src="http://samdods.github.io/images/custom-control-setup.png" title="Configuring a custom control" alt="images"></p>

<p>The main benefit of Interface Builder in my opinion is that it keeps all the UI configuration logic in one place outside of the view controller. By configuring your controls in Interface Builder, this is yet more code that can be removed from your view controller. After all, you would configure your <code>UIButton</code> and <code>UISlider</code> controls in Interface Builder, so why not configure your custom controls too?</p>

<h1>The Limitations</h1>

<p>As discussed above, the class must be KVC-compliant for each key you specify in the runtime attributes. If you specify a key path, then the object returned for each key must be KVC-compliant for the following key in the path.</p>

<p>For example, the list of types shown above means that we can&rsquo;t set the content inset on a <code>UICollectionView</code> because there is no <code>UIEdgeInset</code> type (and no type that uses the exact same C structure type).</p>

<p>We also already discussed the fact that we can&rsquo;t set the border color of a <code>CALayer</code>. Wouldn&rsquo;t it be nice if anything you can think of, you could configure in Interface Builder without adding logic to your view or view controller?</p>

<h1>The Workaround</h1>

<p>Define a category on the object you wish to configure. Comply to KVC in the category and put the configuration logic in the setter method. You don&rsquo;t even need to <code>#import</code> the category header anywhere - just by having it in the project, the runtime will call the setter method.</p>

<h3>Define a Category</h3>

<p>For example, by defining a category on <code>UICollectionView</code>, we can make the class KVC-compliant for any key we choose. To set the content inset, we can define the following category implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">UICollectionView</span> <span class="nl">(ContentInset)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setContentInsetFromString:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">contentInset</span> <span class="o">=</span> <span class="n">UIEdgeInsetsFromString</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no need to define anything in the category header.</p>

<p>This particular example is especailly simple because of the <code>UIEdgeInsetsFromString</code> mathod, which could it seems have been created specifically for this purpose!</p>

<h3>Configure the Interface</h3>

<p>Now we can set the user-defined runtime attributes in Interface Builder like so:</p>

<p><img class="center" src="http://samdods.github.io/images/content-inset-from-string.png" title="Configuring content inset" alt="images"></p>

<p>The <strong>Key Path</strong> must match the name of the setter method in the category, but without the <strong>set</strong> prefix and with lowercase first letter.</p>

<p>Now you&rsquo;ve configured your interface in Interface Builder - the correct place - and you can avoid having clutter in your code!</p>

<p>An added bonus of doing things in Interface Builder is that if you use separate nibs or storyboards for iPad/iPhone then you can configure your view differently for each device without cluttering your code checking the user interface idiom.</p>

<h1>Another Example</h1>

<p>Now we can define the border color of a <code>CALayer</code> by simply mapping it from a <code>UIColor</code>.</p>

<h3>Define a Category</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="bp">CALayer</span> <span class="nl">(Additions)</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setBorderColorFromUIColor:</span><span class="p">(</span><span class="bp">UIColor</span> <span class="o">*</span><span class="p">)</span><span class="nv">color</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">borderColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="bp">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configure the Interface</h3>

<p><img class="center" src="http://samdods.github.io/images/calayer-border-color.png" title="s border color" alt="images"></p>

<h1>Considerations</h1>

<p>I think this is the right way to configure a user interface. Given that we have Interface Builder, we should use it to its full potential. But&hellip; there&rsquo;s always a &ldquo;but&rdquo; isn&rsquo;t there?</p>

<p>Many people wouldn&rsquo;t think to look in Interface Builder at the user-defined runtime attributes, so they could be left very puzzled if they come to maintain your code at a later date. They could be left with a seemingly random border to their view, unable to figure out why it&rsquo;s there.</p>

<p>So like anything of this nature &ndash; and by that I mean a more-advanced use of a programming language or development evironment &ndash; we should use it with caution. Use it only if it is necessary and simplifies logic elsewhere in your code.</p>

<p>Setting up a view in a view controller isn&rsquo;t necessarily messy. The most valid reason for using user-defined runtime attributes is to configure a view differently whether the Interface Builder file is for iPhone or iPad. Because you already have a separate nib or storyboard file specifically for each device, that should be the place that you do any device-specific configuration.</p>

<p>I hope you enjoyed reading this article. If so, please <a href="https://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modal View in Front of the Status Bar]]></title>
    <link href="http://samdods.github.io/blog/2014/02/10/modal-view-in-front-of-the-status-bar/"/>
    <updated>2014-02-10T07:55:28+00:00</updated>
    <id>http://samdods.github.io/blog/2014/02/10/modal-view-in-front-of-the-status-bar</id>
    <content type="html"><![CDATA[<p>This post is based on a really cool effect I saw in the Facebook Paper app released last week. In this app, the user can drag a photo up to the top of the screen to view it full-screen. In doing this, the photo actually appears to be in front of the status bar.</p>

<!-- more -->


<p><strong>Edit</strong> Thanks to <a href="https://twitter.com/EricHoracek">@EricHoracek</a> for pointing out that this can be done without the use of private API methods. I had originally been adding the top (in-front) view controller&rsquo;s view to the <code>UIStatusBarWindow</code> which contains the status bar. But the solution below is much cleaner and uses only public API methods, so is guaranteed for App Store approval.</p>

<p>It&rsquo;s nice to discuss things like this with the never-ending endeavour of finding cleaner approaches and learning something along the way!</p>

<h1>The Effect</h1>

<p><img src="https://github.com/samdods/StatusBarDemo/blob/master/statusBarDemo.gif?raw=true" title="made at imgflip.com"/></p>

<p>What I really like about this is that you can display content full-screen, with no status bar, but allow the user to simply drag down slightly to see the time and other activity shown in the status bar. As we all know with the arrival of iOS 7, content is king! And I think it looks great to show images and other full-screen content without the status bar. But it&rsquo;s nice to know that it&rsquo;s only a slight drag away.</p>

<h1>The Secret</h1>

<p>It&rsquo;s actually very easy. <code>UIWindow</code> has the <code>windowLevel</code> property, which is of type <code>UIWindowLevel</code> (i.e. <code>CGFloat</code>). There are a few predefined window levels that we can take advantage of for this trick. The predefined values are as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIKIT_EXTERN</span> <span class="k">const</span> <span class="n">UIWindowLevel</span> <span class="n">UIWindowLevelNormal</span><span class="p">;</span>
</span><span class='line'><span class="n">UIKIT_EXTERN</span> <span class="k">const</span> <span class="n">UIWindowLevel</span> <span class="n">UIWindowLevelAlert</span><span class="p">;</span>
</span><span class='line'><span class="n">UIKIT_EXTERN</span> <span class="k">const</span> <span class="n">UIWindowLevel</span> <span class="n">UIWindowLevelStatusBar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When displaying a new window, it appears in front of all other existing windows at the same level. The higher the <code>windowLevel</code> value, the closer to the front of the screen the window appears.</p>

<p>Below is how to create a new window and add it above the status bar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 1.</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">topWindow</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2.</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">topWindow</span> <span class="nl">setRootViewController</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">overlayViewController</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3.</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">topWindow</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelStatusBar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 4.</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">topWindow</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create a new window. Although <code>UIWindow</code> is a subclass of <code>UIView</code>, instances of this class don&rsquo;t generally have a superview. You don&rsquo;t need to add the window to anything else in order for it to be displayed.</li>
<li>Specify the root view controller for the window. This is the view controller who&rsquo;s view you want to appear in front of the status bar.</li>
<li>Specify the window level. By specifying <code>UIWindowLevelStatusBar</code>, the new window will appear above the status bar. Other windows with a higher <code>windowLevel</code>, for example <code>UIWindowLevelAlert</code> will appear in front of your new window still.</li>
<li>Show the window. By invoking <code>makeKeyAndVisible</code>, the window is added to the application. You could also write <code>self.topWindow.hidden = NO;</code>.</li>
</ol>


<h1>The Demo</h1>

<p>I created a demo project <a href="https://github.com/samdods/StatusBarDemo">available on GitHub</a>.</p>

<p>I&rsquo;d be happy to talk about this, so feel free to <a href="http://twitter.com/dodsios">tweet me</a>. I&rsquo;d love to hear if anyone else has tried this and maybe taken a different approach. Subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerated Types and Checking Their Values]]></title>
    <link href="http://samdods.github.io/blog/2014/02/01/checking-for-a-value-in-a-bit-mask/"/>
    <updated>2014-02-01T11:06:27+00:00</updated>
    <id>http://samdods.github.io/blog/2014/02/01/checking-for-a-value-in-a-bit-mask</id>
    <content type="html"><![CDATA[<p>Enumerated types are very useful and widely-used. Foundation framework gives us two macros to help give definition to an enumerated type: <a href="http://nshipster.com/ns_enum-ns_options/">NS_ENUM and NS_OPTIONS</a>. But their intended use &ndash; and correct use &ndash; isn&rsquo;t immediately obvious.</p>

<p>First a bit of background: Enumerated types are a part of the ANSI C standard and, if I was a gambler, I would bet my entire future life&rsquo;s earnings on the fact that every single iOS or OS X programmer has encountered them and is very likely to use them daily, even if they are unaware of it. They are defined in a similar way to a struct and it&rsquo;s very common to <code>typedef</code> an enumerated type for easier use.</p>

<p>In this post I will discuss the Objective-C macros <code>NS_ENUM</code> and <code>NS_OPTIONS</code>, their origins and, most importantly, the correct way to check the value of a variable of an enumerated type.</p>

<!-- more -->


<h1>Enumerated Types</h1>

<p>An enumerated type is a data type that consists of named integer values. They are frequently used to represent options. For example, you could define the following enumerated type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">AnimationOptions</span> <span class="p">{</span>
</span><span class='line'> <span class="c1">// 1.</span>
</span><span class='line'>  <span class="n">AllowUserInteraction</span>      <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>  <span class="c1">//   1</span>
</span><span class='line'>  <span class="n">Repeat</span>                    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>  <span class="c1">//   2</span>
</span><span class='line'>  <span class="n">Autoreverse</span>               <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>  <span class="c1">//   4</span>
</span><span class='line'>
</span><span class='line'> <span class="c1">// 2.</span>
</span><span class='line'>  <span class="n">TransitionFlipFromLeft</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span>  <span class="c1">//  16</span>
</span><span class='line'>  <span class="n">TransitionFlipFromRight</span>   <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span>  <span class="c1">//  32</span>
</span><span class='line'>  <span class="n">TransitionCurlUp</span>          <span class="o">=</span> <span class="mi">3</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span>  <span class="c1">//  48</span>
</span><span class='line'>  <span class="n">TransitionCurlDown</span>        <span class="o">=</span> <span class="mi">4</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span>  <span class="c1">//  64</span>
</span><span class='line'>  <span class="n">TransitionCrossDissolve</span>   <span class="o">=</span> <span class="mi">5</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span>   <span class="c1">//  80</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>The first 3 options defined in the above enumerated type, 1, 2 and 4 are distinct bits, i.e. <code>0001</code>, <code>0010</code> and <code>0100</code> respectively. This allows none, one, some or all of these options to be used at the same time. For example <code>0110</code> (i.e. 6) means the animation will repeat and auto-reverse.</p></li>
<li><p>The second set of constants are not distinct bits. This is intentional so that only a single transition type can be used. If I try to set both the <code>TransitionFlipFromRight</code> option and the <code>TransitionCurlUp</code> option at the same time, I&rsquo;ll end up with the <code>TransitionCrossDissolve</code> option (because 32 + 48 = 80).</p></li>
</ol>


<p>You could <code>typedef</code> this enumerated type and use it as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="n">AnimationOptions</span> <span class="n">AnimationOptions</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MyAnimation</span> : <span class="bp">NSObject</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">animationWithOptions:</span><span class="p">(</span><span class="n">AnimationOptions</span><span class="p">)</span><span class="nv">options</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Sized Enumerated Types</h1>

<p>C++ extends the ANSI C definition of <code>enum</code> allowing you to specify the size of your enumerated type. You can use any integer type, for example <code>int</code>, <code>char</code> or <code>unsigned long</code>.</p>

<p>We could inline <code>typedef</code> and specify a size for the the <code>AnimationOptions</code> enumerated type as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="nl">AnimationOptions</span> <span class="p">:</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">AllowUserInteraction</span>    <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'> <span class="c1">// etc.</span>
</span><span class='line'><span class="p">}</span> <span class="n">AnimationOptions</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>NS_ENUM and NS_OPTIONS</h1>

<p>Foundation introduced these macros in OS X 10.8 and iOS 6. Since then they have been the preferred way to declare enumerated types, because each macro implies the intended use of its underlying integer values. They are both defined in exactly the same way. They are identical to each other in all ways but one &ndash; their intended use:</p>

<ul>
<li>Use <code>NS_ENUM</code> to describe a type of variable that may only be set to a single option at any time. An example is <code>UIInterfaceOrientation</code>, because the device can only be held in one orientation at any time.</li>
<li>Use <code>NS_OPTIONS</code> to describe a type of variable that may contain multiple options at the same time. Some of these options may apply at the same time as others; some may not be used in conjunction with any others in the same set. This is referred to as a bitmask, where each bit&ndash;or set of bits&ndash;represents an option. An example is <code>UIInterfaceOrientationMask</code> &ndash; this is used when multiple orientation options may be stored in a single variable, such as <code>unsigned int supportedInterfaceOptions</code> &ndash; we can support more than one interface orientation at the same time.</li>
</ul>


<p>Both of these macros are defined in <code>&lt;Foundation/NSObjCRuntime.h&gt;</code>, and what they boil down to is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define NS_OPTIONS(_type, _name) enum _name : _type _name; enum _name : _type</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t immediately obvious in Xcode because it doens&rsquo;t allow you to &ldquo;Jump to Definition&rdquo;. But it is evident when inspecting the result of the preprocessor. The following is an example of using <code>NS_OPTIONS</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="bp">NSUInteger</span><span class="p">,</span> <span class="n">AnimationOptions</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">AllowUserInteraction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'> <span class="c1">// etc.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example results in the following output from the preprocessor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="nl">AnimationOptions</span> <span class="p">:</span> <span class="bp">NSUInteger</span> <span class="n">AnimationOptions</span><span class="p">;</span> <span class="k">enum</span> <span class="nl">AnimationOptions</span> <span class="p">:</span> <span class="bp">NSUInteger</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">AllowUserInteraction</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'> <span class="c1">// etc.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note it is up to you to enter <code>typedef</code> before the <code>NS_ENUM</code> or <code>NS_OPTIONS</code> macro.</p></blockquote>

<p>Because <code>NS_OPTIONS</code> can hold multiple options at the same time, variables of these types can be set with multiple values using the bitwise OR operator <code>|</code>, as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">AnimationOptions</span> <span class="n">options</span> <span class="o">=</span> <span class="n">Repeat</span> <span class="o">|</span> <span class="n">Autoreverse</span> <span class="o">|</span> <span class="n">TransitionCrossDissolve</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note that in C a variable of an enumerated type can hold a value that is not defined in its underlying enumerated type. With Objective-C (and more specifically the GDB and LLDB compilers), we are warned at compile-time if we set the value of an <code>enum</code>-type variable to anything other than what is defined in its underlying enumerated type definition.</p></blockquote>

<p>In <code>NS_OPTIONS</code>, a set of bits is used as one option when the option has multiple possible values. In <code>UIViewAnimationOptions</code> bit 3 specifies that the animation should repeat indefinitely. This is a binary option and can only be on or off. However, bits 16-19 are used to hold the animation curve option, which can be one&ndash;but only one&ndash;of several options. This is like an NS_ENUM (one option at a time) embedded within the options of an <code>NS_OPTIONS</code> type.</p>

<h1>Checking the Value of an Enumerated Type Variable</h1>

<h2>NS_ENUM</h2>

<p>Checking the value of an <code>NS_ENUM</code>-type variable is simple. It is an integer value and it can only contain one option at a time, so it can be checked for equality like any other integer, for example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIInterfaceOrientation</span> <span class="n">orientation</span> <span class="o">=</span> <span class="n">device</span><span class="p">.</span><span class="n">orientation</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">isPortrait</span> <span class="o">=</span> <span class="p">(</span><span class="n">orientation</span> <span class="o">==</span> <span class="n">UIDeviceOrientationPortrait</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>NS_OPTIONS</h2>

<p>As mentioned above, <code>NS_OPTIONS</code> is intended to hold a list of options that may be used at the same time. Therefore variables of this type are referred to as bitmasks.</p>

<p>Checking the value of a bitmask can&rsquo;t be done by checking for equality, because multiple options are stored in the same variable by setting different bits. So checking for an option is done using the bitwise AND operator. In C this is <code>&amp;</code>.</p>

<p>It might be assumed safe to check as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isCrossDisolveUsedInAnimationOptions:</span><span class="p">(</span><span class="n">AnimationOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">options</span> <span class="o">&amp;</span> <span class="n">TransitionCrossDissolve</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>But This is Wrong!</h1>

<p>Consider the scenario where my animation is created as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MyAnimation</span> <span class="o">*</span><span class="n">animation</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyAnimation</span> <span class="nl">animationWithOptions</span><span class="p">:</span><span class="n">TransitionCurlUp</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This passes in the <code>TransitionCurlUp</code> option (i.e. 48). When this option is passed into the <code>-isCrossDisolveUsedInAnimationOptions:</code> method above, it returns <code>YES</code>, which is WRONG!</p>

<p>It returns <code>YES</code> because the following are equivalent:</p>

<ul>
<li><code>TransitionCurlUp &amp; TransitionCrossDissolve</code></li>
<li><code>48 &amp; 80</code></li>
<li><code>0011 0000</code> bitwise AND <code>0101 0000</code></li>
<li><code>0001 0000</code></li>
<li>non-zero</li>
<li><code>YES</code>.</li>
</ul>


<p>It is wrong because my animation options were specified with <code>TransitionCurlUp</code> option, but this method says it is a <code>TransitionCrossDissolve</code> animation.</p>

<h1>The Correct Way</h1>

<p>The correct way to check for this value is to first bitwise AND the values and then check for equality to the required value, as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isCrossDisolveUsedInAnimationOptions:</span><span class="p">(</span><span class="n">AnimationOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">((</span><span class="n">options</span> <span class="o">&amp;</span> <span class="n">TransitionCrossDissolve</span><span class="p">)</span> <span class="o">==</span> <span class="n">TransitionCrossDissolve</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or more generally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define OptionsHasValue(options, value) (((options) &amp; (value)) == (value))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this macro, I can change my method above, as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isCrossDisolveUsedInAnimationOptions:</span><span class="p">(</span><span class="n">AnimationOptions</span><span class="p">)</span><span class="nv">options</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">OptionsHasValue</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">TransitionCrossDissolve</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So go forth and use <code>NS_ENUM</code> and <code>NS_OPTIONS</code> how they were intended to be used. But just be sure that you are checking their values in the correct way!</p>

<p><a href="http://twitter.com/dodsios">Follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Accessors for Category Properties]]></title>
    <link href="http://samdods.github.io/blog/2014/01/04/dynamic-accessors-for-category-properties/"/>
    <updated>2014-01-04T10:06:30+00:00</updated>
    <id>http://samdods.github.io/blog/2014/01/04/dynamic-accessors-for-category-properties</id>
    <content type="html"><![CDATA[<h1>The Problem</h1>

<p>Repetition, repetition, repetition. I don&rsquo;t like it. I like code to be as <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">dry</a> as it can possibly be without affecting readability, so as soon as I find myself repeating code in a project I immediately refactor. And if I find myself repeatedly writing what many would consider boilerplate code, I begin to wonder how I can avoid doing this in the future.</p>

<p>I was recently adding a couple of properties to an existing class using a category. We can do this thanks to the Objective-C runtime functions <code>objc_getAssociatedObject</code> and <code>objc_setAssociatedObject</code>. I found myself writing the same old getters and setters that looked identical to those I&rsquo;d written countless times before. And herein lies the problem. I don&rsquo;t like repeating myself.</p>

<!-- more -->


<h1>A Solution</h1>

<p>Below is an example of an Objective-C category with some very important properties. It&rsquo;s a surprise these don&rsquo;t exist on the underlying class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">BondGirl</span> <span class="nl">(DZLAdditions)</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIColor</span> <span class="o">*</span><span class="n">dzl_hairColor</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">dzl_weapons</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nicest solution I came up with was to simply declare the properties as dynamic and implement the necessary accessor methods at runtime, from the <code>+load</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">BondGirl</span> <span class="nl">(DZLAdditions)</span>
</span><span class='line'><span class="k">@dynamic</span> <span class="n">dzl_hairColor</span><span class="p">,</span> <span class="n">dzl_weapons</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// implement for all properties (where methods are not already defined)</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="n">implementDynamicPropertyAccessors</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// or implement only for specific property specified by name</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">implementDynamicPropertyAccessorsForPropertyName</span><span class="p">:</span><span class="s">@&quot;dzl_weapons&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// or implement only for specific properties match regular expression</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">implementDynamicPropertyAccessorsForPropertyMatching</span><span class="p">:</span><span class="s">@&quot;^dzl_&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think it looks nice. And if you have multiple properties in your category then it can save a lot of lines of code, and ultimately it avoids repetition. The documentation tells us that a category <code>+load</code> method is called after the class&rsquo;s own <code>+load</code> method. The important thing here is that implementing the <code>+load</code> method within a category does not override the <code>+load</code> method of the class itself.</p>

<p>I&rsquo;ve found that the <code>+implementDynamicPropertyAccessors</code> method is always sufficient for my needs. But the other methods may provide peace of mind as well as the ability to use this functionality on a class that has other dynamic properties that you don&rsquo;t wish to be implemented in this way.</p>

<h1>The Working</h1>

<p>All the magic happens in the <code>+[NSObject implementDynamicPropertyAccessors]</code> method defined in a category on NSObject.</p>

<p>The method itself is very simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementDynamicPropertyAccessors</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">enumeratePropertiesWithBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">objc_property_t</span> <span class="n">property</span><span class="p">){</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">implementAccessorsIfNecessaryForProperty</span><span class="p">:</span><span class="n">property</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All I&rsquo;m doing here is iterating over the properties of <code>self</code>, and sending each property off to another method, which will do all the hard work.</p>

<p>The method <code>+implementAccessorsIfNecessaryForProperty:</code> will inspect the attributes of the property to determine whether or not the accessors need to be implemented. It will then implement the accessor methods if necessary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementAccessorsIfNecessaryForProperty:</span><span class="p">(</span><span class="kt">objc_property_t</span><span class="p">)</span><span class="nv">property</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1.</span>
</span><span class='line'>  <span class="bp">NSArray</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">attributesOfProperty</span><span class="p">:</span><span class="n">property</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isDynamic</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributes</span> <span class="nl">containsObject</span><span class="p">:</span><span class="s">@&quot;D&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isDynamic</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2.</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isObjectType</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">customGetterName</span><span class="p">;</span>
</span><span class='line'>  <span class="bp">NSString</span> <span class="o">*</span><span class="n">customSetterName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">attribute</span> <span class="k">in</span> <span class="n">attributes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unichar</span> <span class="n">firstChar</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">firstChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;T&#39;</span><span class="o">:</span> <span class="n">isObjectType</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">characterAtIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;@&#39;</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;G&#39;</span><span class="o">:</span> <span class="n">customGetterName</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">substringFromIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;S&#39;</span><span class="o">:</span> <span class="n">customSetterName</span> <span class="o">=</span> <span class="p">[</span><span class="n">attribute</span> <span class="nl">substringFromIndex</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isObjectType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3.</span>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4.</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">property_getName</span><span class="p">(</span><span class="n">property</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">implementGetterIfNecessaryForPropertyName</span><span class="p">:</span><span class="n">name</span> <span class="nl">customGetterName</span><span class="p">:</span><span class="n">customGetterName</span> <span class="nl">key</span><span class="p">:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isReadonly</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributes</span> <span class="nl">containsObject</span><span class="p">:</span><span class="s">@&quot;R&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isReadonly</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">implementSetterIfNecessaryForPropertyName</span><span class="p">:</span><span class="n">name</span> <span class="nl">customSetterName</span><span class="p">:</span><span class="n">customSetterName</span> <span class="nl">key</span><span class="p">:</span><span class="n">key</span> <span class="nl">attributes</span><span class="p">:</span><span class="n">attributes</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>First I fetch the attributes of the property and check if the property is dynamic. If the property is not dynamic then we have no business with it.</li>
<li>Next I go through the attributes to determine the type of the property and the custom getter and setter names, if specified. If the property is not an object type, then we have no business with it (I don&rsquo;t currently support properties that are not of an object type).</li>
<li>Next I create a key to be used as a reference to the associated object. Note: this is a static variable, which I increase for each property being implemented, allowing for 2<sup>32</sup> properties to be implemented on each object (or 2<sup>64</sup> for a 64-bit binary), which I think is more than sufficient.</li>
<li>And finally, I get the name of the property and implement the getter and setter methods. The setter is only implemented if the property is not marked as readonly. In reality the property will very rarely be readonly, because something has to set the value. I occasionally define a readonly property in a category and set it lazily when it&rsquo;s read. I might do this, for example, with an NSMutableArray property, but I&rsquo;m not supporting that kind of functionality here.</li>
</ol>


<h1>The Missing Pieces</h1>

<p>Among the missing pieces are the methods that actually implement the getter and setter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementGetterIfNecessaryForPropertyName:</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="p">)</span><span class="nv">propertyName</span> <span class="nf">customGetterName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">customGetterName</span> <span class="nf">key:</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">SEL</span> <span class="k">getter</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">customGetterName</span> <span class="o">?:</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">propertyName</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">implementMethodIfNecessaryForSelector</span><span class="p">:</span><span class="k">getter</span> <span class="nl">parameterTypes</span><span class="p">:</span><span class="nb">NULL</span> <span class="nl">block</span><span class="p">:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">_self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method above defines the getter using the property name or a custom getter name if specified. It then calls another method to create the implementation based on the block specified. The block returns the associated object using the key as the reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementSetterIfNecessaryForPropertyName:</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="p">)</span><span class="nv">propertyName</span> <span class="nf">customSetterName:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">customSetterName</span> <span class="nf">key:</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span> <span class="nf">attributes:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">attributes</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isCopy</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributes</span> <span class="nl">containsObject</span><span class="p">:</span><span class="s">@&quot;C&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isRetain</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributes</span> <span class="nl">containsObject</span><span class="p">:</span><span class="s">@&quot;&amp;&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">objc_AssociationPolicy</span> <span class="n">associationPolicy</span> <span class="o">=</span> <span class="n">isCopy</span> <span class="o">?</span> <span class="nl">OBJC_ASSOCIATION_COPY</span> <span class="p">:</span> <span class="n">isRetain</span> <span class="o">?</span> <span class="nl">OBJC_ASSOCIATION_RETAIN</span> <span class="p">:</span> <span class="n">OBJC_ASSOCIATION_ASSIGN</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">isNonatomic</span> <span class="o">=</span> <span class="p">[</span><span class="n">attributes</span> <span class="nl">containsObject</span><span class="p">:</span><span class="s">@&quot;N&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">isNonatomic</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">objc_AssociationPolicy</span> <span class="k">nonatomic</span> <span class="o">=</span> <span class="n">OBJC_ASSOCIATION_COPY_NONATOMIC</span> <span class="o">-</span> <span class="n">OBJC_ASSOCIATION_COPY</span><span class="p">;</span>
</span><span class='line'>    <span class="n">associationPolicy</span> <span class="o">+=</span> <span class="k">nonatomic</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">SEL</span> <span class="k">setter</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">(</span><span class="n">customSetterName</span> <span class="o">?:</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;set%c%s:&quot;</span><span class="p">,</span> <span class="n">toupper</span><span class="p">(</span><span class="o">*</span><span class="n">propertyName</span><span class="p">),</span> <span class="n">propertyName</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span> <span class="nl">implementMethodIfNecessaryForSelector</span><span class="p">:</span><span class="k">setter</span> <span class="nl">parameterTypes</span><span class="p">:</span><span class="s">&quot;@&quot;</span> <span class="nl">block</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">_self</span><span class="p">,</span> <span class="kt">id</span> <span class="n">var</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">associationPolicy</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method above defines the setter using the property name &ndash; capitalized and prefixed with <code>set</code> &ndash; or a custom setter name if specified. It also has to inspect the attributes to determine the association policy, which must be provided when setting an associated object. The block used here simply sets the associated object using the specified key as the reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">implementMethodIfNecessaryForSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span> <span class="nf">parameterTypes:</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nv">types</span> <span class="nf">block:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">instancesRespondToSelector</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">instancesRespondToSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">instancesRespondToSelector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">IMP</span> <span class="n">implementation</span> <span class="o">=</span> <span class="n">imp_implementationWithBlock</span><span class="p">(</span><span class="n">block</span><span class="p">);</span>
</span><span class='line'>    <span class="n">class_addMethod</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">selector</span><span class="p">,</span> <span class="n">implementation</span><span class="p">,</span> <span class="n">types</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method above adds a method to the class for the given selector and implementation block.</p>

<p>Finally, I defined a couple of other methods to separate out concerns. The following method iterates over the properties and executes the given block with each property</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">enumeratePropertiesWithBlock:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">objc_property_t</span> <span class="n">property</span><span class="p">))</span><span class="nv">block</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSParameterAssert</span><span class="p">(</span><span class="n">block</span><span class="p">);</span>
</span><span class='line'>  <span class="n">uint</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">objc_property_t</span> <span class="o">*</span><span class="n">properties</span> <span class="o">=</span> <span class="n">class_copyPropertyList</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">count</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">objc_property_t</span> <span class="n">property</span> <span class="o">=</span> <span class="n">properties</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="n">block</span><span class="p">(</span><span class="n">property</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">properties</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the following method simply returns an array of the attributes of the given property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">+</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">attributesOfProperty:</span><span class="p">(</span><span class="kt">objc_property_t</span><span class="p">)</span><span class="nv">property</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="nl">stringWithCString</span><span class="p">:</span><span class="n">property_getAttributes</span><span class="p">(</span><span class="n">property</span><span class="p">)</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">componentsSeparatedByString</span><span class="p">:</span><span class="s">@&quot;,&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
Thanks for reading! If you got this far, I hope it&rsquo;s because you found it interesting. If I&rsquo;m right, then you might like to check out the code, which is available on <a href="https://github.com/samdods/dynamicCategoryProperties/tree/master/DynamicCategoryProperties/NSObject%2BCategoryProperties">GitHub</a>. It&rsquo;s part of a project to demo how it can be used, and is tweaked to include extra methods <code>+implementDynamicPropertyAccessorsForPropertyName:</code> and <code>+implementDynamicPropertyAccessorsForPropertyMatching:</code>.</p>

<p>And <a href="http://twitter.com/dodsios">follow me on twitter</a> or subscribe to my <a href="http://octopress.dev/atom.xml">RSS feed</a> for more of the same!</p>
]]></content>
  </entry>
  
</feed>
